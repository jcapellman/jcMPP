<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Data.Entity.DbContext">
            <summary>
                A DbContext instance represents a session with the database and can be used to query and save
                instances of your entities. DbContext is a combination of the Unit Of Work and Repository patterns.
            </summary>
            <remarks>
                <para>
                    Typically you create a class that derives from DbContext and contains <see cref="T:Microsoft.Data.Entity.DbSet`1" />
                    properties for each entity in the model. If the <see cref="T:Microsoft.Data.Entity.DbSet`1" /> properties have a public setter,
                    they are automatically initialized when the instance of the derived context is created.
                </para>
                <para>
                    Override the <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method to configure the database (and
                    other options) to be used for the context. Alternatively, if you would rather perform configuration externally
                    instead of inline in your context, you can use <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder`1"/> 
                    (or <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder"/>) to externally create an instance of <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1"/> 
                    (or <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions"/>) and pass it to a base constructor of <see cref="T:Microsoft.Data.Entity.DbContext"/>.
                </para>
                <para>
                    The model is discovered by running a set of conventions over the entity classes found in the
                    <see cref="T:Microsoft.Data.Entity.DbSet`1" /> properties on the derived context. To further configure the model that
                    is discovered by convention, you can override the <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)" /> method.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContext" /> class. The
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" />
                method will be called to configure the database (and other options) to be used for this context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.#ctor(System.IServiceProvider)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContext" /> class using an <see cref="T:System.IServiceProvider" />.
                </para>
                <para>
                    The service provider must contain all the services required by Entity Framework (and the database being
                    used). The Entity Framework services can be registered using the
                    <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> method.
                    Most databases also provide an extension method on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to register the
                    services required. For example, the Microsoft SQL Server provider includes an AddSqlServer() method
                    to add the required services.
                </para>
                <para>
                    If the <see cref="T:System.IServiceProvider" /> has a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> or
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" /> registered, then this will be used as the options for
                    this context instance. The <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method
                    will still be called to allow further configuration of the options.
                </para>
            </summary>
            <param name="serviceProvider">The service provider to be used.</param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.#ctor(Microsoft.Data.Entity.Infrastructure.DbContextOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContext" /> with the specified options. The
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method will still be called to allow further
                configuration of the options.
            </summary>
            <param name="options">The options for this context.</param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.#ctor(System.IServiceProvider,Microsoft.Data.Entity.Infrastructure.DbContextOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContext" /> class using an <see cref="T:System.IServiceProvider" />
                and the specified options.
                <para>
                    The <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method will still be called to allow further
                    configuration of the options.
                </para>
                <para>
                    The service provider must contain all the services required by Entity Framework (and the database being
                    used). The Entity Framework services can be registered using the
                    <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> method.
                    Most databases also provide an extension method on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to register the
                    services required. For example, the Microsoft SQL Server provider includes an AddSqlServer() method
                    to add the required services.
                </para>
                <para>
                    If the <see cref="T:System.IServiceProvider" /> has a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> or
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" />
                    registered, then this will be used as the options for this context instance. The 
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" />
                    method will still be called to allow further configuration of the options.
                </para>
            </summary>
            <param name="serviceProvider">The service provider to be used.</param>
            <param name="options">The options for this context.</param>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContext.Microsoft#Data#Entity#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)">
            <summary>
                <para>
                    Override this method to configure the database (and other options) to be used for this context.
                    This method is called for each instance of the context that is created.
                </para>
                <para>
                    In situations where an instance of <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> may or may not have been passed
                    to the constructor, you can use <see cref="P:Microsoft.Data.Entity.DbContextOptionsBuilder.IsConfigured"/> to determine if 
                    the options have already been set, and skip some or all of the logic in 
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/>.
                </para>
            </summary>
            <param name="optionsBuilder">
                A builder used to create or modify options for this context. Databases (and other extensions)
                typically define extension methods on this object that allow you to configure the context.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)">
            <summary>
                Override this method to further configure the model that was discovered by convention from the entity types
                exposed in <see cref="T:Microsoft.Data.Entity.DbSet`1" /> properties on your derived context. The resulting model may be cached
                and re-used for subsequent instances of your derived context.
            </summary>
            <remarks>
                If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.Data.Entity.DbContextOptionsBuilder.UseModel(Microsoft.Data.Entity.Metadata.IModel)"/>)
                then this method will not be run.
            </remarks>
            <param name="modelBuilder">
                The builder being used to construct the model for this context. Databases (and other extensions) typically
                define extension methods on this object that allow you to configure aspects of the model that are specific
                to a given database.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.SaveChanges">
            <summary>
                Saves all changes made in this context to the database.
            </summary>
            <remarks>
                This method will automatically call <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                changes to entity instances before saving to the underlying database. This can be disabled via
                <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </remarks>
            <returns>
                The number of state entries written to the database.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.SaveChanges(System.Boolean)">
            <summary>
                Saves all changes made in this context to the database.
            </summary>
            <param name="acceptAllChangesOnSuccess">
                Indicates whether <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
                been sent successfully to the database.
            </param>
            <remarks>
                This method will automatically call <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                changes to entity instances before saving to the underlying database. This can be disabled via
                <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </remarks>
            <returns>
                The number of state entries written to the database.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously saves all changes made in this context to the database.
            </summary>
            <remarks>
                <para>
                    This method will automatically call <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                    changes to entity instances before saving to the underlying database. This can be disabled via
                    <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of state entries written to the database.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Asynchronously saves all changes made in this context to the database.
            </summary>
            <param name="acceptAllChangesOnSuccess">
                Indicates whether <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
                been sent successfully to the database.
            </param>
            <remarks>
                <para>
                    This method will automatically call <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                    changes to entity instances before saving to the underlying database. This can be disabled via
                    <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of state entries written to the database.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Dispose">
            <summary>
                Releases the allocated resources for this context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Entry``1(``0)">
            <summary>
                Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the given entity. The entry provides
                access to change tracking information and operations for the entity.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to get the entry for. </param>
            <returns> The entry for the given entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Entry(System.Object)">
            <summary>
                <para>
                    Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the given entity. The entry provides
                    access to change tracking information and operations for the entity.
                </para>
                <para>
                    This method may be called on an entity that is not tracked. You can then
                    set the <see cref="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.State" /> property on the returned entry
                    to have the context begin tracking the entity in the specified state.
                </para>
            </summary>
            <param name="entity"> The entity to get the entry for. </param>
            <returns> The entry for the given entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Add``1(``0,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that it will
                be inserted into the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to add. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Attach``1(``0,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to attach. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Update``1(``0,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that it will
                    be updated in the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbContext.Attach``1(``0,Microsoft.Data.Entity.GraphBehavior)" /> to begin tracking the entity in the
                    <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> 
                    to mark the desired properties as modified.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to update. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Remove``1(``0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If the entity is already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking the entity (rather than marking it as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since the
                entity was previously added to the context and does not exist in the database.
            </remarks>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Add(System.Object,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that it will
                be inserted into the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entity"> The entity to add. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Attach(System.Object,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entity"> The entity to attach. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Update(System.Object,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that it will
                    be updated in the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbContext.Attach(System.Object,Microsoft.Data.Entity.GraphBehavior)" /> to begin tracking the entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entity"> The entity to update. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Remove(System.Object)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If the entity is already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking the entity (rather than marking it as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since the
                entity was previously added to the context and does not exist in the database.
            </remarks>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.AddRange(System.Object[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.AttachRange(System.Object[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.UpdateRange(System.Object[])">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entities will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbContext.Attach(System.Object,Microsoft.Data.Entity.GraphBehavior)" /> to begin tracking each entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.RemoveRange(System.Object[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that they will
                be removed from the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If any of the entities are already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking those entities (rather than marking them as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since those
                entities were previously added to the context and do not exist in the database.
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.AddRange(System.Collections.Generic.IEnumerable{System.Object},Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entities or also other related entities.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object},Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to attach. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entities or also other related entities.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.UpdateRange(System.Collections.Generic.IEnumerable{System.Object},Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entities will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbContext.Attach(System.Object,Microsoft.Data.Entity.GraphBehavior)" /> to begin tracking each entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entities or also other related entities.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.RemoveRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that they will
                be removed from the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If any of the entities are already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking those entities (rather than marking them as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since those
                entities were previously added to the context and do not exist in the database.
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContext.Database">
            <summary>
                Provides access to database related information and operations for this context.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContext.ChangeTracker">
            <summary>
                Provides access to information and operations for entity instances this context is tracking.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContext.Model">
            <summary>
                The metadata about the shape of entities, the relationships between them, and how they map to the database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContext.Set``1">
            <summary>
                Creates a <see cref="T:Microsoft.Data.Entity.DbSet`1" /> that can be used to query and save instances of <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"> The type of entity for which a set should be returned. </typeparam>
            <returns> A set for the given entity type. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.DbContextOptionsBuilder">
            <summary>
                <para>
                    Provides a simple API surface for configuring <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" />. Databases (and other extensions)
                    typically define extension methods on this object that allow you to configure the database connection (and other 
                    options) to be used for a context.
                </para>
                <para>
                    You can use <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder" /> to configure a context by overriding
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> or creating a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" />
                    externally and passing it to the context constructor.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContextOptionsBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder" /> class with no options set.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContextOptionsBuilder.#ctor(Microsoft.Data.Entity.Infrastructure.DbContextOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder" /> class to further configure
                a given <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions"/>.
            </summary>
            <param name="options"> The options to be configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContextOptionsBuilder.Options">
            <summary>
                Gets the options being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContextOptionsBuilder.IsConfigured">
            <summary>
                <para>
                    Gets a value indicating whether any options have been configured.
                </para>
                <para>
                    This can be useful when you have overridden <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> to configure
                    the context, but in some cases you also externally provide options via the context constructor. This property can be
                    used to determine if the options have already been set, and skip some or all of the logic in 
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/>.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContextOptionsBuilder.UseModel(Microsoft.Data.Entity.Metadata.IModel)">
            <summary>
                Sets the model to be used for the context. If the model is set, then <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)"/>
                will not be run.
            </summary>
            <param name="model"> The model to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContextOptionsBuilder.EnableSensitiveDataLogging">
            <summary>
                Enables application data to be included in exception messages, logging, etc. This can include the values assigned to properties 
                of your entity instances, parameter values for commands being sent to the database, and other such data. You should only enable
                this flag if you have the appropriate security measures in place based on the sensitivity of this data.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContextOptionsBuilder.Microsoft#Data#Entity#Infrastructure#IDbContextOptionsBuilderInfrastructure#AddOrUpdateExtension``1(``0)">
            <summary>
                <para>
                    Adds the given extension to the options. If an existing extension of the same type already exists, it will be replaced.
                </para>
                <para>
                    This property is intended for use by extension methods to configure the context. It is not intended to be used in
                    application code.
                </para>
            </summary>
            <typeparam name="TExtension"> The type of extension to be added. </typeparam>
            <param name="extension"> The extension to be added. </param>
        </member>
        <member name="T:Microsoft.Data.Entity.DbContextOptionsBuilder`1">
            <summary>
                <para>
                    Provides a simple API surface for configuring <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" />. Databases (and other extensions)
                    typically define extension methods on this object that allow you to configure the database connection (and other 
                    options) to be used for a context.
                </para>
                <para>
                    You can use <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder" /> to configure a context by overriding
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> or creating a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" />
                    externally and passing it to the context constructor.
                </para>
            </summary>
            <typeparam name="TContext"> The type of context to be configured. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContextOptionsBuilder`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder`1" /> class with no options set.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContextOptionsBuilder`1.#ctor(Microsoft.Data.Entity.Infrastructure.DbContextOptions{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder`1" /> class to further configure
                a given <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions"/>.
            </summary>
            <param name="options"> The options to be configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.DbContextOptionsBuilder`1.Options">
            <summary>
                Gets the options being configured.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbContextOptionsBuilder`1.UseModel(Microsoft.Data.Entity.Metadata.IModel)">
            <summary>
                Sets the model to be used for the context. If the model is set, then <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)"/>
                will not be run.
            </summary>
            <param name="model"> The model to be used. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.DbSet`1">
            <summary>
                <para>
                    A <see cref="T:Microsoft.Data.Entity.DbSet`1"/> can be used to query and save instances of <typeparamref name="TEntity"/>. 
                    LINQ queries against a <see cref="T:Microsoft.Data.Entity.DbSet`1" /> will be translated into queries against the database.
                </para>
                <para>
                    The results of a LINQ query against a <see cref="T:Microsoft.Data.Entity.DbSet`1" /> will contain the results
                    returned from the database and may not reflect changes made in the context that have not
                    been persisted to the database. For example, the results will not contain newly added entities
                    and may still contain entities that are marked for deletion.
                </para>
                <para>
                    Depending on the database being used, some parts of a LINQ query against a <see cref="T:Microsoft.Data.Entity.DbSet`1" /> 
                    may be evaluated in memory rather than being translated into a database query.
                </para>
                <para>
                    <see cref="T:Microsoft.Data.Entity.DbSet`1" /> objects are usually obtained from a <see cref="T:Microsoft.Data.Entity.DbSet`1" />
                    property on a derived <see cref="T:Microsoft.Data.Entity.DbContext" /> or from the <see cref="M:Microsoft.Data.Entity.DbContext.Set``1" />
                    method.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being operated on by this set. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Add(`0,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that it will
                be inserted into the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entity"> The entity to add. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entity"> The entity to attach. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Remove(`0)">
            <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If the entity is already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking the entity (rather than marking it as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since the
                entity was previously added to the context and does not exist in the database.
            </remarks>
            <param name="entity"> The entity to remove. </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.Update(`0,Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                <para>
                    Begins tracking the given entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that it will
                    be updated in the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entity will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)" /> to begin tracking the entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entity"> The entity to update. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entity or also other related entities.
            </param>
            <returns>
                The <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.AddRange(`0[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.AttachRange(`0[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to attach. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.RemoveRange(`0[])">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that they will
                be removed from the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If any of the entities are already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking those entities (rather than marking them as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since those
                entities were previously added to the context and do not exist in the database.
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.UpdateRange(`0[])">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entities will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)" /> to begin tracking each entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to add. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entities or also other related entities.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" /> state such that no
                operation will be performed when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <param name="entities"> The entities to attach. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entities or also other related entities.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> state such that they will
                be removed from the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
            </summary>
            <remarks>
                If any of the entities are already tracked in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state then the context will
                stop tracking those entities (rather than marking them as <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" />) since those
                entities were previously added to the context and do not exist in the database.
            </remarks>
            <param name="entities"> The entities to remove. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.UpdateRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)">
            <summary>
                <para>
                    Begins tracking the given entities in the <see cref="F:Microsoft.Data.Entity.EntityState.Modified" /> state such that they will
                    be updated in the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> is called.
                </para>
                <para>
                    All properties of the entities will be marked as modified. To mark only some properties as modified, use
                    <see cref="M:Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)" /> to begin tracking each entity in the <see cref="F:Microsoft.Data.Entity.EntityState.Unchanged" />
                    state and then use the returned <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> to mark the desired properties as modified.
                </para>
            </summary>
            <param name="entities"> The entities to update. </param>
            <param name="behavior">
                Determines whether the context will bring in only the given entities or also other related entities.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute a query against the database
                to load all entities from the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.IEnumerator" /> which when enumerated will execute a query against the database
                to load all entities from the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Query#Internal#IAsyncEnumerableAccessor{TEntity}#AsyncEnumerable">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> which when enumerated will asynchronously execute the query against
                the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#ElementType">
            <summary>
                Gets the IQueryable element type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#Expression">
            <summary>
                Gets the IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#Provider">
            <summary>
                Gets the IQueryable provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbSet`1.System#ComponentModel#IListSource#GetList">
            <summary>
                <para>
                    This method is called by data binding frameworks when attempting to data bind directly to a <see cref="T:Microsoft.Data.Entity.DbSet`1"/>.
                </para>
                <para>
                    This implementation always throws an exception as binding directly to a <see cref="T:Microsoft.Data.Entity.DbSet`1"/> will result in a query being 
                    sent to the database every time the data binding framework requests the contents of the collection. Instead materialize the results 
                    into a collection, by calling a method such as <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/> or 
                    <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/>, and bind to the collection.
                </para>
            </summary>
            <exception cref="T:System.NotSupportedException"> Always thrown. </exception>
            <returns> Never returns, always throws an exception. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.DbSet`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Gets a value indicating whether the collection is a collection of System.Collections.IList objects.
                Always returns false.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.DbUpdateConcurrencyException">
            <summary>
                An exception that is thrown when a concurrency violation is encountered while saving to the database. A concurrency violation
                occurs when an unexpected number of rows are affected during save. This is usually because the data in the database has
                been modified since it was loaded into memory.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbUpdateConcurrencyException.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Update.IUpdateEntry})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbUpdateConcurrencyException" /> class.
            </summary>
            <param name="message"> The error message that explains the reason for the exception. </param>
            <param name="entries"> The entries that were involved in the concurrency violation. </param>
        </member>
        <member name="T:Microsoft.Data.Entity.DbUpdateException">
            <summary>
                An exception that is thrown when an error is encountered while saving to the database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.DbUpdateException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbUpdateException" /> class.
            </summary>
            <param name="message"> The error message that explains the reason for the exception. </param>
            <param name="innerException"> The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbUpdateException.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Update.IUpdateEntry})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbUpdateException" /> class.
            </summary>
            <param name="message"> The error message that explains the reason for the exception. </param>
            <param name="entries"> The entries that were involved in the error. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.DbUpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Update.IUpdateEntry})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.DbUpdateException" /> class.
            </summary>
            <param name="message"> The error message that explains the reason for the exception. </param>
            <param name="entries"> The entries that were involved in the error. </param>
            <param name="innerException"> The exception that is the cause of the current exception. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.DbUpdateException.Entries">
            <summary>
                Gets the entries that were involved in the error. Typically this is a single entry, but in some cases it
                may be zero or multiple entries.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.EF">
            <summary>
                Static methods that are useful in application code where there is not an EF type for the method to be accessed from. For example,
                referencing a shadow state property in a LINQ query.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.EF.Property``1(System.Object,System.String)">
            <summary>
                Addresses a given property on an entity instance. This is useful when you want to reference a shadow state property in a
                LINQ query. Currently this method can only be used in LINQ queries and can not be used to access the value assigned to a
                property in other scenarios.
            </summary>
            <example>
                The following code performs a filter using the a LastUpdated shadow state property.
                <code>
                    var blogs = context.Blogs
                        .Where(b =&gt; EF.Property&lt;DateTime&gt;(b, "LastUpdated") > DateTime.Now.AddDays(-5))
                </code>
            </example>
            <typeparam name="TProperty"> The type of the property being referenced. </typeparam>
            <param name="entity"> The entity to access the property on. </param>
            <param name="propertyName"> The name of the property. </param>
            <returns> The value assigned to the property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether a sequence contains any elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to check for being empty.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified
                predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> whose elements to test for a condition.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if every element of the source sequence passes the test in the specified
                predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the number of elements in a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence
                that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if
                <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the first
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if
                <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> ( <typeparamref name="TSource" /> ) if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the last
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence, and throws an exception
                if there is not exactly one element in the sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition,
                and throws an exception if more than one such element exists.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence that satisfies the condition in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;
                this method throws an exception if there is more than one element in the sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence, or <c>default</c> (
                <typeparamref name="TSource" />)
                if the sequence contains no elements.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition or
                a default value if no such element exists; this method throws an exception if more than one element
                satisfies the condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="predicate"> A function to test an element for a condition. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the single element of the input sequence that satisfies the condition in
                <paramref name="predicate" />, or <c>default</c> ( <typeparamref name="TSource" /> ) if no such element is found.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the minimum value of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the minimum value in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TResult">
                The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the minimum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the minimum value in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the maximum value of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the maximum value in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TResult">
                The type of the value returned by the function represented by <paramref name="selector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to determine the maximum of.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the maximum value in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the sum of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on
                each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values of type <typeparamref name="TSource" />.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values..
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                A sequence of values to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained
                by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" /> .
            </typeparam>
            <param name="source"> A sequence of values of type <typeparamref name="TSource" />. </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the average of the projected values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
            </param>
            <param name="item"> The object to locate in the sequence. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a list from.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates an array from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create an array from.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains an array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Specifies related entities to include in the query results. The navigation property to be included is specified starting with the
                type of entity being queried (<typeparamref name="TEntity"/>). If you wish to include additional types based on the navigation
                properties of the type being included, then chain a call to 
                <see cref="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.Data.Entity.Query.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})"/>
                after this call.
            </summary>
            <example>
                <para>
                    The following query shows including a single level of related entities.
                    <code>
                        context.Blogs.Include(blog => blog.Posts);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags);
                    </code>
                </para>
                <para>
                    The following query shows including multiple levels and branches of related data.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags).ThenInclude(tag => tag.TagInfo)
                            .Include(blog => blog.Contributors);
                    </code>
                </para>
            </example>
            <typeparam name = "TEntity" > The type of entity being queried. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="source"> The source query. </param>
            <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t => t.Property1</c>). 
            </param>
            <returns>
                A new query with the related data included.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.Data.Entity.Query.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
                Specifies additional related data to be further included based on a related type that was just included.
            </summary>
            <example>
                <para>
                    The following query shows including a single level of related entities.
                    <code>
                        context.Blogs.Include(blog => blog.Posts);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags);
                    </code>
                </para>
                <para>
                    The following query shows including multiple levels and branches of related data.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags).ThenInclude(tag => tag.TagInfo)
                            .Include(blog => blog.Contributors);
                    </code>
                </para>
            </example>
            <typeparam name = "TEntity" > The type of entity being queried. </typeparam>
            <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="source"> The source query. </param>
            <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t => t.Property1</c>). 
            </param>
            <returns>
                A new query with the related data included.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.Data.Entity.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
                Specifies additional related data to be further included based on a related type that was just included.
            </summary>
            <example>
                <para>
                    The following query shows including a single level of related entities.
                    <code>
                        context.Blogs.Include(blog => blog.Posts);
                    </code>
                </para>
                <para>
                    The following query shows including two levels of entities on the same branch.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags);
                    </code>
                </para>
                <para>
                    The following query shows including multiple levels and branches of related data.
                    <code>
                        context.Blogs
                            .Include(blog => blog.Posts).ThenInclude(post => post.Tags).ThenInclude(tag => tag.TagInfo)
                            .Include(blog => blog.Contributors);
                    </code>
                </para>
            </example>
            <typeparam name = "TEntity" > The type of entity being queried. </typeparam>
            <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="source"> The source query. </param>
            <param name="navigationPropertyPath">
                A lambda expression representing the navigation property to be included (<c>t => t.Property1</c>). 
            </param>
            <returns>
                A new query with the related data included.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})">
            <summary>
                Provides an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that allows asynchronous enumeration
                of the query. This method is typically not used in application code. <see cref="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)" />
                provides a simple way to asynchronously enumerate the results of a query.
            </summary>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> from.
            </param>
            <returns>
                An object to asynchronously enumerate the results.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
                <para>
                    Returns a new query where the change tracker will not track any of the entities that are returned. 
                    If the entity instances are modified, this will not be detected by the change tracker and 
                    <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/> will not persist those changes to the database.
                </para>
                <para>
                    Disabling change tracking is useful for read-only scenarios because it avoids the overhead of setting 
                    up change tracking for each entity instance. You should not disable change tracking if you want to 
                    manipulate entity instances and persist those changes to the database using 
                    <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/>.
                </para>
                <para>
                    Identity resolution will still be performed to ensure that all occurrences of an entity with a given key 
                    in the result set are represented by the same entity instance.
                </para>
                <para>
                    The default tracking behavior for queries can be controlled by <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.QueryTrackingBehavior"/>.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns>
                A new query where the result set will not be tracked by the context.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})">
            <summary>
                <para>
                    Returns a new query where the change tracker will keep track of changes for all entities that are returned.
                    Any modification to the entity instances will be detected and persisted to the database during
                    <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/>.
                </para>
                <para>
                    The default tracking behavior for queries can be controlled by <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.QueryTrackingBehavior"/>.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns>
                A new query where the result set will not be tracked by the context.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})">
            <summary>
                Enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
            <param name="source"> The source query. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
            <param name="source"> The source query. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function and a comparer.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Linq.IQueryable`1" /> by enumerating it
                asynchronously
                according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="TSource">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
            </param>
            <param name="keySelector"> A function to extract a key from each element. </param>
            <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <typeparam name="T">
                The type of the elements of <paramref name="source" />.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to enumerate.
            </param>
            <param name="action"> The action to perform on each element. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.EntityState">
            <summary>
                The state in which an entity is being tracked by a context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Detached">
            <summary>
                The entity is not being tracked by the context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Unchanged">
            <summary>
                The entity is being tracked by the context and exists in the database. Its property
                values have not changed from the values in the database.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Deleted">
            <summary>
                The entity is being tracked by the context and exists in the database. It has been marked
                for deletion from the database.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Modified">
            <summary>
                The entity is being tracked by the context and exists in the database. Some or all of its
                property values have been modified.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.EntityState.Added">
            <summary>
                The entity is being tracked by the context but does not yet exist in the database.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.GraphBehavior">
            <summary>
                Indicates how the navigation properties of an entity are traversed so that a given operation can be recursively
                performed on the entities that it is related to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.GraphBehavior.IncludeDependents">
            <summary>
                Navigation properties where the entity being acted on is the principal are traversed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.GraphBehavior.SingleObject">
            <summary>
                Navigation properties are not traversed. The operation is only performed on the root entity.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ModelBuilder">
            <summary>
                <para>
                    Provides a simple API surface for configuring a <see cref="T:Microsoft.Data.Entity.Metadata.IMutableModel" /> that defines the shape of your
                    entities, the relationships between them, and how they map to the database.
                </para>
                <para>
                    You can use <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> to construct a model for a context by overriding
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)" /> on your derived context. Alternatively you can create the
                    model externally and set it on a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> instance that is passed to the context constructor.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.#ctor(Microsoft.Data.Entity.Metadata.Conventions.ConventionSet)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> class that will
                apply a set of conventions.
            </summary>
            <param name="conventions"> The conventions to be applied to the model. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ModelBuilder.Model">
            <summary>
                The model being configured.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the model. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ModelBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalModelBuilder}#Instance">
            <summary>
                <para>
                    The internal <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> being used to configure this model.
                </para>
                <para>
                    This property is intended for use by extension methods to configure the model. It is not intended to be used in
                    application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity``1">
            <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity(System.Type)">
            <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
            <param name="type"> The entity type to be configured. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity(System.String)">
            <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If an entity type with the provided name is not already part of the model,
                a new entity type that does not have a corresponding CLR type will be added to the model.
            </summary>
            <param name="name"> The name of the entity type to be configured. </param>
            <returns> An object that can be used to configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity``1(System.Action{Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder{``0}})">
            <summary>
                <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.Data.Entity.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <param name="buildAction"> An action that performs configuration of the entity type. </param>
            <returns>
                The same <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity(System.Type,System.Action{Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder})">
            <summary>
                <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.Data.Entity.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
            </summary>
            <param name="type"> The entity type to be configured. </param>
            <param name="buildAction"> An action that performs configuration of the entity type. </param>
            <returns>
                The same <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Entity(System.String,System.Action{Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder})">
            <summary>
                <para>
                    Performs configuration of a given entity type in the model.
                    If an entity type with the provided name is not already part of the model,
                    a new entity type that does not have a corresponding CLR type will be added to the model.
                </para>
                <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.Data.Entity.ModelBuilder.Entity(System.String)" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
            </summary>
            <param name="name"> The name of the entity type to be configured. </param>
            <param name="buildAction"> An action that performs configuration of the entity type. </param>
            <returns>
                The same <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Ignore``1">
            <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
            <typeparam name="TEntity"> The  entity type to be removed from the model. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelBuilder.Ignore(System.Type)">
            <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
            <param name="type"> The entity type to be removed from the model. </param>
        </member>
        <member name="T:Microsoft.Data.Entity.QueryTrackingBehavior">
            <summary>
                Indicates how the results of a query are tracked by the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.QueryTrackingBehavior.TrackAll">
            <summary>
                The change tracker will keep track of changes for all entities that are returned from a LINQ query.
                Any modification to the entity instances will be detected and persisted to the database during
                <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.QueryTrackingBehavior.NoTracking">
            <summary>
                <para>
                    The change tracker will not track any of the entities that are returned from a LINQ query. If the
                    entity instances are modified, this will not be detected by the change tracker and 
                    <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/> will not persist those changes to the database.
                </para>
                <para>
                    Disabling change tracking is useful for read-only scenarios because it avoids the overhead of setting 
                    up change tracking for each entity instance. You should not disable change tracking if you want to 
                    manipulate entity instances and persist those changes to the database using 
                    <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/>.
                </para>
                <para>
                    Identity resolution will still be performed to ensure that all occurrences of an entity with a given key 
                    in the result set are represented by the same entity instance.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker">
            <summary>
                Provides access to change tracking information and operations for entity instances the context is tracking.
                Instances of this class are typically obtained from <see cref="P:Microsoft.Data.Entity.DbContext.ChangeTracker" /> and it is not designed
                to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.IStateManager,Microsoft.Data.Entity.ChangeTracking.Internal.IChangeDetector,Microsoft.Data.Entity.ChangeTracking.Internal.IEntityEntryGraphIterator,Microsoft.Data.Entity.DbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> class. Instances of this class are typically
                obtained from <see cref="P:Microsoft.Data.Entity.DbContext.ChangeTracker" /> and it is not designed to be directly constructed
                in your application code.
            </summary>
            <param name="stateManager"> The internal state manager being used to store information about tracked entities. </param>
            <param name="changeDetector"> The internal change detector used to identify changes in tracked entities. </param>
            <param name="graphIterator"> The internal graph iterator used to traverse graphs of entities. </param>
            <param name="context"> The context this change tracker belongs to. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled">
            <summary>
                <para>
                    Gets or sets a value indicating whether the <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> method is called
                    automatically by methods of <see cref="T:Microsoft.Data.Entity.DbContext" /> and related classes.
                </para>
                <para>
                    The default value is true. This ensures the context is aware of any changes to tracked entity instances
                    before performing operations such as <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> or returning change tracking
                    information. If you disable automatic detect changes then you must ensure that
                    <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> is called when entity instances have been modified.
                    Failure to do so may result in some changes not being persisted during
                    <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> or out-of-date change tracking information being returned.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.QueryTrackingBehavior">
            <summary>
                <para>
                    Gets or sets the tracking behavior for LINQ queries run against the context. Disabling change tracking
                    is useful for read-only scenarios because it avoids the overhead of setting up change tracking for each
                    entity instance. You should not disable change tracking if you want to manipulate entity instances and
                    persist those changes to the database using <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/>.
                </para>
                <para>
                    This method sets the default behavior for the context, but you can override this behavior for individual 
                    queries using the <see cref="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})"/>
                    and <see cref="M:Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})"/> methods.
                </para>
                <para>
                    The default value is <see cref="F:Microsoft.Data.Entity.QueryTrackingBehavior.TrackAll"/>. This means the change tracker will
                    keep track of changes for all entities that are returned from a LINQ query.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.Entries">
            <summary>
                Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for each entity being tracked by the context.
                The entries provide access to change tracking information and operations for each entity.
            </summary>
            <returns> An entry for each entity being tracked. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.Entries``1">
            <summary>
                Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> for all entities of a given type being tracked by the context.
                The entries provide access to change tracking information and operations for each entity.
            </summary>
            <typeparam name="TEntity"> The type of entities to get entries for. </typeparam>
            <returns> An entry for each entity of the given type that is being tracked. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#ChangeTracking#Internal#IStateManager}#Instance">
            <summary>
                <para>
                    Gets the internal state manager being used to store information about tracked entities.
                </para>
                <para>
                    This property is intended for use by extension methods. It is not intended to be used in
                    application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.Context">
            <summary>
                Gets the context this change tracker belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges">
            <summary>
                Scans the tracked entity instances to detect any changes made to the instance data. <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" />
                is usually called automatically by the context when up-to-date information is required (before
                <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> and when returning change tracking information). You typically only need to 
                call this method if you have disabled <see cref="P:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.AcceptAllChanges">
            <summary>
                Accepts all changes made to entities in the context. It will be assumed that the tracked entities
                represent the current state of the database. This method is typically called by <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges"/>
                after changes have been successfully saved to the database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.TrackGraph(System.Object,System.Action{Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode})">
            <summary>
                <para>
                    Begins tracking an entity and any entities that are reachable by traversing it's navigation properties.
                    Traversal is recursive so the navigation properties of any discovered entities will also be scanned.
                    The specified <paramref name="callback" /> is called for each discovered entity and must set the
                    <see cref="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.State" /> that each entity should be tracked in. If no state is set, the entity
                    remains untracked.
                </para>
                <para>
                    This method is designed for use in disconnected scenarios where entities are retrieved using one instance of
                    the context and then changes are saved using a different instance of the context. An example of this is a
                    web service where one service call retrieves entities from the database and another service call persists
                    any changes to the entities. Each service call uses a new instance of the context that is disposed when the
                    call is complete.
                </para>
                <para>
                    If an entity is discovered that is already tracked by the context, that entity is not processed (and it's
                    navigation properties are not traversed).
                </para>
            </summary>
            <param name="rootEntity"> The entity to begin traversal from. </param>
            <param name="callback">
                An action to configure the change tracking information for each entity. For the entity to begin being tracked,
                the <see cref="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.State" /> must be set.
            </param>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given entity.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry" /> class. Instances of this class are returned from
                methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> API and it is not designed to be directly constructed in
                your application code.
            </summary>
            <param name="internalEntry"> The internal entry tracking information about this entity. </param>
            
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Entity">
            <summary>
                Gets the entity being tracked by this entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.State">
            <summary>
                <para>
                    Gets or sets that state that this entity is being tracked in.
                </para>
                <para>
                    When setting the state, the entity will always end up in the specified state. For example, if you
                    change the state to <see cref="F:Microsoft.Data.Entity.EntityState.Deleted" /> the entity will be marked for deletion regardless
                    of its current state. This is different than calling <see cref="M:Microsoft.Data.Entity.DbSet`1.Remove(`0)" /> where the entity
                    will be disconnected (rather than marked for deletion) if it is in the <see cref="F:Microsoft.Data.Entity.EntityState.Added" /> state.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#ChangeTracking#Internal#InternalEntityEntry}#Instance">
            <summary>
                <para>
                    Gets the internal entry that is tracking information about this entity.
                </para>
                <para>
                    This property is intended for use by extension methods. It is not intended to be used in
                    application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Context">
            <summary>
                Gets the context that is tracking the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Metadata">
            <summary>
                Gets the metadata about the shape of the entity, its relationships to other entities, and how it maps to the database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry.Property(System.String)">
            <summary>
                Provides access to change tracking information and operations for a given
                property of this entity.
            </summary>
            <param name="propertyName"> The property to access information and operations for. </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry.IsKeySet">
            <summary>
                Gets a value indicating if the key values of this entity have been assigned a value.
                False if one or more of the key properties is assigned null or the CLR default,
                otherwise true.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode">
            <summary>
                Provides access to change tracking information and operations for a node in a 
                graph of entities that is being traversed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry,Microsoft.Data.Entity.Metadata.INavigation)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode" /> class.
            </summary>
            <param name="internalEntityEntry"> The internal entry tracking information about this entity. </param>
            <param name="inboundNavigation"> 
                The navigation property that is being traversed to reach this node in the graph.
            </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode.InboundNavigation">
            <summary>
                Gets the navigation property that is being traversed to reach this node in the graph.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode.NodeState">
            <summary>
                Gets or sets state that will be available to all nodes that are visited after this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode.Entry">
            <summary>
                Gets the entry tracking information about this entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#ChangeTracking#Internal#InternalEntityEntry}#Instance">
            <summary>
                <para>
                    Gets the internal entry that is tracking information about this entity.
                </para>
                <para>
                    This property is intended for use by extension methods. It is not intended to be used in
                    application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode.CreateNode(Microsoft.Data.Entity.ChangeTracking.EntityEntryGraphNode,Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry,Microsoft.Data.Entity.Metadata.INavigation)">
            <summary>
                Creates a new node for the entity that is being traversed next in the graph.
            </summary>
            <param name="currentNode"> The node that the entity is being traversed from. </param>
            <param name="internalEntityEntry">
                 The internal entry tracking information about the entity being traversed to. 
            </param>
            <param name="reachedVia"> The navigation property that is being traversed to reach the new node. </param>
            <returns> The newly created node. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given entity.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being tracked by this entry. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1" /> class. Instances of this class are returned
                from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> API and it is not designed to be directly
                constructed in your application code.
            </summary>
            <param name="internalEntry"> The internal entry tracking information about this entity. </param>
            
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.Entity">
            <summary>
                Gets the entity being tracked by this entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Provides access to change tracking information and operations for a given
                property of this entity.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to access information and operations for
                (<c>t => t.Property1</c>).
            </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.Property``1(System.String)">
            <summary>
                Provides access to change tracking information and operations for a given
                property of this entity.
            </summary>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <param name="propertyName"> The property to access information and operations for. </param>
            <returns> An object that exposes change tracking information and operations for the given property. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.PropertyEntry">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.PropertyEntry" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="internalEntry">  The internal entry tracking information about the entity the property belongs to. </param>
            <param name="name"> The name of the property. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.IsModified">
            <summary>
                Gets or sets a value indicating whether the value of this property has been modified
                and should be updated in the database when <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" />
                is called.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.Metadata">
            <summary>
                Gets the metadata that describes the facets of this property and how it maps to the database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.CurrentValue">
            <summary>
                Gets or sets the value currently assigned to this property. If the current value is set using this property,
                the change tracker is aware of the change and <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> is not required
                for the context to detect the change.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry.OriginalValue">
            <summary>
                Gets or sets the value that was assigned to this property when it was retrieved from the database.
                This property is populated when an entity is retrieved from the database, but setting it may be
                useful in disconnected scenarios where entities are retrieved with one context instance and
                saved with a different context instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ChangeTracking.PropertyEntry`2">
            <summary>
                <para>
                    Provides access to change tracking information and operations for a given property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of the entity the property belongs to. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.ChangeTracking.PropertyEntry`2.#ctor(Microsoft.Data.Entity.ChangeTracking.Internal.InternalEntityEntry,System.String)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ChangeTracking.PropertyEntry`2" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> API and it is
                    not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="internalEntry">  The internal entry tracking information about the entity the property belongs to. </param>
            <param name="name"> The name of the property. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry`2.CurrentValue">
            <summary>
                Gets or sets the value currently assigned to this property. If the current value is set using this property,
                the change tracker is aware of the change and <see cref="M:Microsoft.Data.Entity.ChangeTracking.ChangeTracker.DetectChanges" /> is not required
                for the context to detect the change.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ChangeTracking.PropertyEntry`2.OriginalValue">
            <summary>
                Gets or sets the value that was assigned to this property when it was retrieved from the database.
                This property is populated when an entity is retrieved from the database, but setting it may be
                useful in disconnected scenarios where entities are retrieved with one context instance and
                saved with a different context instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.EntityTypeExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IEntityType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.GetDerivedTypes(Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Gets all types in the model that derive from a given entity type.
            </summary>
            <param name="entityType"> The base type to find types that derive from. </param>
            <returns> The derived types. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.RootType(Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Gets the root base type for a given entity type.
            </summary>
            <param name="entityType"> The type to find the root of. </param>
            <returns> 
                The root base type. If the given entity type is not a derived type, then the same entity type is returned.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.IsAssignableFrom(Microsoft.Data.Entity.Metadata.IEntityType,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Determines if an entity type derives from (or is the same as) a given entity type.
            </summary>
            <param name="entityType"> The base entity type. </param>
            <param name="derivedType"> The entity type to check if it derives from <paramref name="entityType"/>. </param>
            <returns>
                True if <paramref name="derivedType"/> derives from (or is the same as) <paramref name="entityType"/>, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.FindKey(Microsoft.Data.Entity.Metadata.IEntityType,Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the primary or alternate key that is defined on the given property. Returns null if no key is defined
                for the given property.
            </summary>
            <param name="entityType"> The entity type to find the key on. </param>
            <param name="property"> The property that the key is defined on. </param>
            <returns> The key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.FindForeignKeys(Microsoft.Data.Entity.Metadata.IEntityType,Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="property"> The property to find the foreign keys on. </param>
            <returns> The foreign keys. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.FindForeignKeys(Microsoft.Data.Entity.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty})">
            <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="properties"> The properties to find the foreign keys on. </param>
            <returns> The foreign keys. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.FindForeignKey(Microsoft.Data.Entity.Metadata.IEntityType,Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IKey,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="property"> The property that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.GetReferencingForeignKeys(Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                is the principal).
            </summary>
            <param name="entityType"> The entity type to find the foreign keys for. </param>
            <returns> The foreign keys that reference the given entity type. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.FindNavigation(Microsoft.Data.Entity.Metadata.IEntityType,System.Reflection.PropertyInfo)">
            <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
            <param name="entityType"> The entity type to find the navigation property on. </param>
            <param name="propertyInfo"> The navigation property on the entity class. </param>
            <returns> The navigation property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.FindNavigation(Microsoft.Data.Entity.Metadata.IEntityType,System.String)">
            <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
            <param name="entityType"> The entity type to find the navigation property on. </param>
            <param name="name"> The name of the navigation property on the entity class. </param>
            <returns> The navigation property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.GetNavigations(Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Gets all navigation properties on the given entity type.
            </summary>
            <param name="entityType"> The entity type to get navigation properties for. </param>
            <returns> All navigation properties on the given entity type. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.FindProperty(Microsoft.Data.Entity.Metadata.IEntityType,System.Reflection.PropertyInfo)">
            <summary>
                <para>
                    Gets a property on the given entity type. Returns null if no property is found.
                </para>
                <para>
                    This API only finds scalar properties and does not find navigation properties. Use 
                    <see cref="M:Microsoft.Data.Entity.EntityTypeExtensions.FindNavigation(Microsoft.Data.Entity.Metadata.IEntityType,System.Reflection.PropertyInfo)"/> to find a navigation property.
                </para>
            </summary>
            <param name="entityType"> The entity type to find the property on. </param>
            <param name="propertyInfo"> The property on the entity class. </param>
            <returns> The property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.EntityTypeExtensions.FindIndex(Microsoft.Data.Entity.Metadata.IEntityType,Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the index defined on the given property. Returns null if no index is defined.
            </summary>
            <param name="entityType"> The entity type to find the index on. </param>
            <param name="property"> The property to find the index on. </param>
            <returns> The index, or null if none is found. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.KeyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IKey"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.KeyExtensions.FindReferencingForeignKeys(Microsoft.Data.Entity.Metadata.IKey)">
            <summary>
                Gets all foreign keys that target a given primary or alternate key.
            </summary>
            <param name="key"> The key to find the foreign keys for. </param>
            <returns> The foreign keys that reference the given key. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ModelExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IModel"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ModelExtensions.FindEntityType(Microsoft.Data.Entity.Metadata.IModel,System.Type)">
            <summary>
                Gets the entity that maps the given entity class. Returns null if no entity type with the given name is found.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type of the entity class to find the type for. </param>
            <returns> The entity type, or null if none if found. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.MutableAnnotatableExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IMutableAnnotatable"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableAnnotatableExtensions.GetOrAddAnnotation(Microsoft.Data.Entity.Metadata.IMutableAnnotatable,System.String,System.String)">
            <summary>
                Gets the existing annotation with a given key, or adds a new annotation if one does not exist.
            </summary>
            <param name="annotatable"> The object to find or add the annotation to. </param>
            <param name="annotationName"> The key of the annotation to be found or added. </param>
            <param name="value"> The value to be stored in the annotation if a new one is created. </param>
            <returns> The found or added annotation. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.MutableEntityTypeExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IMutableEntityType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.Data.Entity.Metadata.IMutableEntityType)">
            <summary>
                Gets all types in the model that derive from a given entity type.
            </summary>
            <param name="entityType"> The base type to find types that derive from. </param>
            <returns> The derived types. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.RootType(Microsoft.Data.Entity.Metadata.IMutableEntityType)">
            <summary>
                Gets the root base type for a given entity type.
            </summary>
            <param name="entityType"> The type to find the root of. </param>
            <returns> 
                The root base type. If the given entity type is not a derived type, then the same entity type is returned.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Sets the primary key for this entity.
            </summary>
            <param name="entityType"> The entity type to set the key on. </param>
            <param name="property"> The primary key property. </param>
            <returns> The newly created key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Gets the existing primary key of an entity, or sets it if one is not defined.
            </summary>
            <param name="entityType"> The entity type to get or set the key on. </param>
            <param name="property"> The property to set as the primary key if one is not already defined. </param>
            <returns> The existing or newly created key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IMutableProperty})">
            <summary>
                Gets the existing primary key of an entity, or sets it if one is not defined.
            </summary>
            <param name="entityType"> The entity type to get or set the key on. </param>
            <param name="properties"> The properties to set as the primary key if one is not already defined. </param>
            <returns> The existing or newly created key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the primary or alternate key that is defined on the given property. Returns null if no key is defined
                for the given property.
            </summary>
            <param name="entityType"> The entity type to find the key on. </param>
            <param name="property"> The property that the key is defined on. </param>
            <returns> The key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.AddKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Adds a new alternate key to this entity type.
            </summary>
            <param name="entityType"> The entity type to add the alternate key to. </param>
            <param name="property"> The property to use as an alternate key. </param>
            <returns> The newly created key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Gets the existing alternate key defined on a property, or creates a new one if one is not
                already defined.
            </summary>
            <param name="entityType"> The entity type to get or create the alternate key on. </param>
            <param name="property"> The property that is used as the alternate key. </param>
            <returns> The existing or newly created alternate key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IMutableProperty})">
            <summary>
                Gets the existing alternate key defined on a set of properties, or creates a new one if one is not
                already defined.
            </summary>
            <param name="entityType"> The entity type to get or create the alternate key on. </param>
            <param name="properties"> The properties that are used as the alternate key. </param>
            <returns> The existing or newly created alternate key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="property"> The property to find the foreign keys on. </param>
            <returns> The foreign keys. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty})">
            <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="properties"> The properties to find the foreign keys on. </param>
            <returns> The foreign keys. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindForeignKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IKey,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
            <param name="entityType"> The entity type to find the foreign keys on. </param>
            <param name="property"> The property that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.Data.Entity.Metadata.IMutableEntityType)">
            <summary> 
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type 
                is the principal). 
            </summary> 
            <param name="entityType"> The entity type to find the foreign keys for. </param> 
            <returns> The foreign keys that reference the given entity type. </returns> 
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.AddForeignKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IMutableProperty,Microsoft.Data.Entity.Metadata.IMutableKey,Microsoft.Data.Entity.Metadata.IMutableEntityType)">
            <summary>
                Adds a new relationship to this entity.
            </summary>
            <param name="entityType"> The entity type to add the foreign key to. </param>
            <param name="property"> The property that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The newly created foreign key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IMutableProperty,Microsoft.Data.Entity.Metadata.IMutableKey,Microsoft.Data.Entity.Metadata.IMutableEntityType)">
            <summary>
                Gets an existing relationship, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the foreign key to. </param>
            <param name="property"> The property that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The existing or newly created foreign key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IMutableProperty},Microsoft.Data.Entity.Metadata.IMutableKey,Microsoft.Data.Entity.Metadata.IMutableEntityType)">
            <summary>
                Gets an existing relationship, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the foreign key to. </param>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The existing or newly created foreign key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindNavigation(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)">
            <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
            <param name="entityType"> The entity type to find the navigation property on. </param>
            <param name="propertyInfo"> The navigation property on the entity class. </param>
            <returns> The navigation property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindNavigation(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.String)">
            <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
            <param name="entityType"> The entity type to find the navigation property on. </param>
            <param name="name"> The name of the navigation property on the entity class. </param>
            <returns> The navigation property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetNavigations(Microsoft.Data.Entity.Metadata.IMutableEntityType)">
            <summary>
                Gets all navigation properties on the given entity type.
            </summary>
            <param name="entityType"> The entity type to get navigation properties for. </param>
            <returns> All navigation properties on the given entity type. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindProperty(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)">
            <summary>
                <para>
                    Gets a property on the given entity type. Returns null if no property is found.
                </para>
                <para>
                    This API only finds scalar properties and does not find navigation properties. Use 
                    <see cref="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindNavigation(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)"/> to find a navigation property.
                </para>
            </summary>
            <param name="entityType"> The entity type to find the property on. </param>
            <param name="propertyInfo"> The property on the entity class. </param>
            <returns> The property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.AddProperty(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.String,System.Type)">
            <summary>
                Adds a property to this entity.
            </summary>
            <param name="entityType"> The entity type to add the property to. </param>
            <param name="name"> The name of the property to add. </param>
            <param name="propertyType"> The type of value the property will hold. </param>
            <returns> The newly created property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.AddProperty(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)">
            <summary>
                Adds a property to this entity.
            </summary>
            <param name="entityType"> The entity type to add the property to. </param>
            <param name="propertyInfo"> The corresponding property in the entity class. </param>
            <returns> The newly created property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.String,System.Type)">
            <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the property to. </param>
            <param name="name"> The name of the property. </param>
            <param name="propertyType"> The type of value the property will hold. </param>
            <returns> The existing or newly created property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)">
            <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the property to. </param>
            <param name="propertyInfo"> The corresponding property in the entity class. </param>
            <returns> The existing or newly created property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.String)">
            <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the property to. </param>
            <param name="name"> The name of the property. </param>
            <returns> The existing or newly created property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindIndex(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the index defined on the given property. Returns null if no index is defined.
            </summary>
            <param name="entityType"> The entity type to find the index on. </param>
            <param name="property"> The property to find the index on. </param>
            <returns> The index, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.AddIndex(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Adds an index to this entity.
            </summary>
            <param name="entityType"> The entity type to add the index to. </param>
            <param name="property"> The property to be indexed. </param>
            <returns> The newly created index. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.Data.Entity.Metadata.IMutableEntityType,Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Gets the index defined on the given property or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the index to. </param>
            <param name="property"> The property to be indexed. </param>
            <returns> The existing or newly created index. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IMutableProperty})">
            <summary>
                Gets the index defined on the given property or creates a new one if one is not already defined.
            </summary>
            <param name="entityType"> The entity type to get or add the index to. </param>
            <param name="properties"> The properties to be indexed. </param>
            <returns> The existing or newly created index. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.MutableKeyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IMutableKey"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableKeyExtensions.FindReferencingForeignKeys(Microsoft.Data.Entity.Metadata.IMutableKey)">
            <summary>
                Gets all foreign keys that target a given primary or alternate key.
            </summary>
            <param name="key"> The key to find the foreign keys for. </param>
            <returns> The foreign keys that reference the given key. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.MutableModelExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IMutableModel"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableModelExtensions.FindEntityType(Microsoft.Data.Entity.Metadata.IMutableModel,System.Type)">
            <summary>
                Gets the entity that maps the given entity class. Returns null if no entity type with the given name is found.
            </summary>
            <param name="model"> The model to find the entity type in. </param>
            <param name="type"> The type of the entity class to find the type for. </param>
            <returns> The entity type, or null if none if found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableModelExtensions.GetOrAddEntityType(Microsoft.Data.Entity.Metadata.IMutableModel,System.String)">
            <summary>
                Gets the entity type with the given name or adds a new entity type if none is found.
            </summary>
            <param name="model"> The model to find or add the entity type to. </param>
            <param name="name"> The name of the entity type. </param>
            <returns> The existing or newly created entity type. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.MutableNavigationExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IMutableNavigation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableNavigationExtensions.FindInverse(Microsoft.Data.Entity.Metadata.IMutableNavigation)">
            <summary>
                Gets the navigation property on the other end of the relationship. Returns null if
                there is no navigation property defined on the other end of the relationship.
            </summary>
            <param name="navigation"> The navigation property to find the inverse of. </param>
            <returns>
                The inverse navigation, or null if none is defined.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutableNavigationExtensions.GetTargetType(Microsoft.Data.Entity.Metadata.IMutableNavigation)">
            <summary>
                Gets the entity type that a given navigation property will hold an instance of 
                (or hold instances of if it is a collection navigation).
            </summary>
            <param name="navigation"> The navigation property to find the target entity type of. </param>
            <returns> The target entity type. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.MutablePropertyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IMutableProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.MutablePropertyExtensions.SetMaxLength(Microsoft.Data.Entity.Metadata.IMutableProperty,System.Nullable{System.Int32})">
            <summary>
                Sets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String"/> '
                then this is the maximum number of characters.
            </summary>
            <param name="property"> The property to set the maximum length of. </param>
            <param name="maxLength"> The maximum length of data that is allowed in this property. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.MutablePropertyExtensions.FindContainingForeignKeys(Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
            <param name="property"> The property to get foreign keys for. </param>
            <returns>
                The foreign keys that use this property.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutablePropertyExtensions.FindContainingPrimaryKey(Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
            <param name="property"> The property to get primary key for. </param>
            <returns>
                The primary that use this property, or null if it is not part of the primary key.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.MutablePropertyExtensions.FindContainingKeys(Microsoft.Data.Entity.Metadata.IMutableProperty)">
            <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
            <param name="property"> The property to get primary and alternate keys for. </param>
            <returns>
                The primary and alternate keys that use this property.
            </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.NavigationExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.INavigation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.NavigationExtensions.IsDependentToPrincipal(Microsoft.Data.Entity.Metadata.INavigation)">
            <summary>
                Gets a value indicating whether the given navigation property is the navigation property on the dependent entity 
                type that points to the principal entity.
            </summary>
            <param name="navigation"> The navigation property to check. </param>
            <returns> 
                True if the given navigation property is the navigation property on the dependent entity 
                type that points to the principal entity, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.NavigationExtensions.IsCollection(Microsoft.Data.Entity.Metadata.INavigation)">
            <summary>
                Gets a value indicating whether the given navigation property is a collection property.
            </summary>
            <param name="navigation"> The navigation property to check. </param>
            <returns>
                True if this is a collection property, false if it is a reference property.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.NavigationExtensions.FindInverse(Microsoft.Data.Entity.Metadata.INavigation)">
            <summary>
                Gets the navigation property on the other end of the relationship. Returns null if
                there is no navigation property defined on the other end of the relationship.
            </summary>
            <param name="navigation"> The navigation property to find the inverse of. </param>
            <returns>
                The inverse navigation, or null if none is defined.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.NavigationExtensions.GetTargetType(Microsoft.Data.Entity.Metadata.INavigation)">
            <summary>
                Gets the entity type that a given navigation property will hold an instance of 
                (or hold instances of if it is a collection navigation).
            </summary>
            <param name="navigation"> The navigation property to find the target entity type of. </param>
            <returns> The target entity type. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.PropertyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.Data.Entity.Metadata.IProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.PropertyExtensions.GetMaxLength(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String"/> '
                then this is the maximum number of characters.
            </summary>
            <param name="property"> The property to get the maximum length of. </param>
            <returns> The maximum length, or null if none if defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.PropertyExtensions.IsForeignKey(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether this property is used as a foreign key (or part of a composite foreign key).
            </summary>
            <param name="property"> The property to check. </param>
            <returns>
                True if the property is used as a foreign key, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.PropertyExtensions.IsPrimaryKey(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether this property is used as the primary key (or part of a composite primary key).
            </summary>
            <param name="property"> The property to check. </param>
            <returns>
                True if the property is used as the primary key, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.PropertyExtensions.IsKey(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets a value indicating whether this property is used as part of a primary or alternate key
                (or part of a composite primary or alternate key).
            </summary>
            <param name="property"> The property to check. </param>
            <returns>
                True if the property is part of a key, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.PropertyExtensions.FindContainingForeignKeys(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
            <param name="property"> The property to get foreign keys for. </param>
            <returns>
                The foreign keys that use this property.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.PropertyExtensions.FindContainingPrimaryKey(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
            <param name="property"> The property to get primary key for. </param>
            <returns>
                The primary that use this property, or null if it is not part of the primary key.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.PropertyExtensions.FindContainingKeys(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
            <param name="property"> The property to get primary and alternate keys for. </param>
            <returns>
                The primary and alternate keys that use this property.
            </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.AccessorExtensions">
            <summary>
                <para>
                    Extension methods for <see cref="T:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1"/>. 
                </para>
                <para>
                    These methods are typically used by database providers (and other extensions). They are generally
                    not used in application code.
                </para>
                <para>
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1"/> is used to hide properties that are not intended to be used in 
                    application code but can be used in extension methods written by database providers etc.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.AccessorExtensions.GetService``1(Microsoft.Data.Entity.Infrastructure.IInfrastructure{System.IServiceProvider})">
            <summary>
                <para>
                    Resolves a service from the <see cref="T:System.IServiceProvider"/> exposed from a type that implements 
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1"/>. 
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1"/> is used to hide properties that are not intended to be used in 
                    application code but can be used in extension methods written by database providers etc.
                </para>
            </summary>
            <typeparam name="TService"> The type of service to be resolved. </typeparam>
            <param name="accessor"> The object exposing the service provider. </param>
            <returns> The requested service. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.Data.Entity.Infrastructure.IInfrastructure{``0})">
            <summary>
                <para>
                    Gets the value from a property that is being hidden using <see cref="T:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1"/>.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1"/> is used to hide properties that are not intended to be used in 
                    application code but can be used in extension methods written by database providers etc.
                </para>
            </summary>
            <typeparam name="T"> The type of the property being hidden by <see cref="T:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1"/>. </typeparam>
            <param name="accessor"> The object that exposes the property. </param>
            <returns> The object assigned to the property. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.Annotatable">
            <summary>
                <para>
                    Base class for types that support reading and writing annotations.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.Annotatable.GetAnnotations">
            <summary>
                Gets all annotations on the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.Annotatable.AddAnnotation(System.String,System.Object)">
            <summary>
                Adds an annotation to this object. Throws if an annotation with the specified name already exists.
            </summary>
            <param name="name"> The key of the annotation to be added. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The newly added annotation. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.Annotatable.GetOrAddAnnotation(System.String,System.Object)">
            <summary>
                Adds an annotation to this object or returns the existing annotation if one with the specified name
                already exists.
            </summary>
            <param name="name"> The key of the annotation to be added. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, the newly
                added annotation.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.Annotatable.FindAnnotation(System.String)">
            <summary>
                Gets the annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, null.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.Annotatable.RemoveAnnotation(System.String)">
            <summary>
                Removes the given annotation from this object.
            </summary>
            <param name="name"> The annotation to remove. </param>
            <returns> The annotation that was removed. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.Annotatable.Item(System.String)">
            <summary>
                Gets the value annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The value of the existing annotation if an annotation with the specified name already exists.
                Otherwise, null.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.Annotatable.Microsoft#Data#Entity#Infrastructure#IAnnotatable#GetAnnotations">
            <summary>
                Gets all annotations on the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.Annotatable.Microsoft#Data#Entity#Infrastructure#IAnnotatable#FindAnnotation(System.String)">
            <summary>
                Gets the annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, null.
            </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.Annotation">
            <summary>
                <para>
                    An arbitrary piece of metadata that can be stored on an object that implements <see cref="T:Microsoft.Data.Entity.Infrastructure.IAnnotatable"/>. 
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.Annotation.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Infrastructure.Annotation" /> class.
            </summary>
            <param name="name"> The key of this annotation. </param>
            <param name="value"> The value assigned to this annotation. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.Annotation.Name">
            <summary>
                Gets the key of this annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.Annotation.Value">
            <summary>
                Gets the value assigned to this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.CoreLoggingEventId">
            <summary>
                Values that are used as the eventId when logging messages from this assembly via <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Infrastructure.CoreLoggingEventId.DatabaseError">
            <summary>
                An error occurred while accessing the database.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Infrastructure.CoreLoggingEventId.CompilingQueryModel">
            <summary>
                A LINQ query is being compiled.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Infrastructure.CoreLoggingEventId.OptimizedQueryModel">
            <summary>
                An object model representing a LINQ query was optimized.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Infrastructure.CoreLoggingEventId.IncludingNavigation">
            <summary>
                A navigation property that was included in a LINQ query is being processed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Infrastructure.CoreLoggingEventId.QueryPlan">
            <summary>
                An execution expression was calculated by compiling a LINQ query.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.DatabaseFacade">
            <summary>
                Provides access to database related information and operations for a context.
                Instances of this class are typically obtained from <see cref="P:Microsoft.Data.Entity.DbContext.Database" /> and it is not designed
                to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DatabaseFacade.#ctor(Microsoft.Data.Entity.DbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Infrastructure.DatabaseFacade" /> class. Instances of this class are typically
                obtained from <see cref="P:Microsoft.Data.Entity.DbContext.Database" /> and it is not designed to be directly constructed
                in your application code.
            </summary>
            <param name="context"> The context this database API belongs to .</param>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreated">
            <summary>
                Ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
            <returns> True if the database is created, false if it already existed. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> 
                A task that represents the asynchronous save operation. The task result contains true if the database is created, 
                false if it already existed. 
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeleted">
            <summary>
                <para>
                    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by 
                    the model for this context.
                </para>
            </summary>
            <returns> True if the database is deleted, false if it did not exist. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by 
                    the model for this context.
                </para>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> 
                A task that represents the asynchronous save operation. The task result contains true if the database is deleted, 
                false if it did not exist. 
            </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.DatabaseFacade.Microsoft#Data#Entity#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance">
            <summary>
                <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.DbContextAttribute">
            <summary>
                Identifies the <see cref="T:Microsoft.Data.Entity.DbContext"/> that a class belongs to. For example, this attribute is used
                to identify which context a migration applies to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DbContextAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextAttribute" /> class. 
            </summary>
            <param name="contextType"> The associated context. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.DbContextAttribute.ContextType">
            <summary>
                Gets the associated context.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions">
            <summary>
                The options to be used by a <see cref="T:Microsoft.Data.Entity.DbContext"/>. You normally override 
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> or use a <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder"/> 
                to create instances of this class and it is not designed to be directly constructed in your application code. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DbContextOptions.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.Data.Entity.Infrastructure.IDbContextOptionsExtension})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> class. You normally override 
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> or use a <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder"/> 
                to create instances of this class and it is not designed to be directly constructed in your application code.
            </summary>
            <param name="extensions"> The extensions that store the configured options. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.DbContextOptions.Extensions">
            <summary>
                Gets the extensions that store the configured options.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DbContextOptions.FindExtension``1">
            <summary>
                Gets the extension of the specified type. Returns null if no extension of the specified type is configured.
            </summary>
            <typeparam name="TExtension"> The type of the extension to get. </typeparam>
            <returns> The extension, or null if none was found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DbContextOptions.GetExtension``1">
            <summary>
                Gets the extension of the specified type. Throws if no extension of the specified type is configured.
            </summary>
            <typeparam name="TExtension"> The type of the extension to get. </typeparam>
            <returns> The extension. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DbContextOptions.WithExtension``1(``0)">
            <summary>
                Adds the given extension to the options.
            </summary>
            <typeparam name="TExtension"> The type of extension to be added. </typeparam>
            <param name="extension"> The extension to be added. </param>
            <returns> The same options instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1">
            <summary>
                The options to be used by a <see cref="T:Microsoft.Data.Entity.DbContext"/>. You normally override 
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> or use a <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder`1"/> 
                to create instances of this class and it is not designed to be directly constructed in your application code. 
            </summary>
            <typeparam name="TContext"> The type of the context these options apply to. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" /> class. You normally override 
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> or use a <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder`1"/> 
                to create instances of this class and it is not designed to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.Data.Entity.Infrastructure.IDbContextOptionsExtension})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" /> class. You normally override 
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> or use a <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder`1"/> 
                to create instances of this class and it is not designed to be directly constructed in your application code.
            </summary>
            <param name="extensions"> The extensions that store the configured options. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1.WithExtension``1(``0)">
            <summary>
                Adds the given extension to the options.
            </summary>
            <typeparam name="TExtension"> The type of extension to be added. </typeparam>
            <param name="extension"> The extension to be added. </param>
            <returns> The same options instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder">
            <summary>
                Provides Entity Framework specific APIs for configuring services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                These APIs are usually accessed by calling
                <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
                and then chaining API calls on the returned <see cref="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder" /> class.
            </summary>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> being configured. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder.AddDbContext``1(System.Action{Microsoft.Data.Entity.DbContextOptionsBuilder})">
            <summary>
                <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and ensures services that the context 
                    uses are resolved from the <see cref="T:System.IServiceProvider" />.
                </para>
                <para>
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
            </summary>
            <example>
                <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services.AddEntityFramework() 
                            .AddSqlServer()
                            .AddDbContext&lt;MyContext&gt;(options => options.UseSqlServer(connectionString)); 
                    }
                </code>
            </example>
            <typeparam name="TContext"> The type of context to be registered. </typeparam>
            <param name="optionsAction">
                <para>
                    An optional action to configure the <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
                <para>
                    If an action is supplied here, the <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
                <para>
                    You do not need to expose a <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions" /> constructor parameter for the options to be passed to the
                    context. If you choose to expose a constructor parameter, we recommend typing it as the generic
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions`1" />. You can use the non-generic <see cref="T:Microsoft.Data.Entity.Infrastructure.DbContextOptions"/> but this will only
                    work if you have one derived context type registered in your <see cref="T:System.IServiceProvider"/>.
                </para>
            </param>
            <returns>
                A builder that allows further Entity Framework specific setup of the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Extensions#DependencyInjection#IServiceCollection}#Instance">
            <summary>
                <para>
                    Gets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> being configured.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1">
            <summary>
                <para>
                    This interface is explicitly implemented by type to hide properties that are not intended to be used in application code 
                    but can be used in extension methods written by database providers etc.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <typeparam name="T"> The type of the property being hidden. </typeparam>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.IInfrastructure`1.Instance">
            <summary>
                Gets the value of the property being hidden.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IAnnotatable">
            <summary>
                <para>
                    A class that exposes annotations. Annotations allow for arbitrary metadata to be stored on an object.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.IAnnotatable.Item(System.String)">
            <summary>
                Gets the value annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>         
                The value of the existing annotation if an annotation with the specified name already exists. Otherwise, null. 
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.IAnnotatable.FindAnnotation(System.String)">
            <summary>
                Gets the annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, null. 
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.IAnnotatable.GetAnnotations">
            <summary>
                Gets all annotations on the current object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IAnnotation">
            <summary>
                <para>
                    An arbitrary piece of metadata that can be stored on an object that implements <see cref="T:Microsoft.Data.Entity.Infrastructure.IAnnotatable"/>.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.IAnnotation.Name">
            <summary>
                Gets the key of this annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.IAnnotation.Value">
            <summary>
                Gets the value assigned to this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IDbContextFactory`1">
            <summary>
                A factory for creating derived <see cref="T:Microsoft.Data.Entity.DbContext" /> instances. Implement this interface to enable
                design-time services for context types that do not have a public default constructor. At design-time,
                derived <see cref="T:Microsoft.Data.Entity.DbContext" /> instances can be created in order to enable specific design-time
                experiences such as Migrations. Design-time services will automatically discover implementations of 
                this interface that are in the same assembly as the derived context.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
            <summary>
                Creates a new instance of a derived context.
            </summary>
            <returns> An instance of <typeparamref name="TContext"/>. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IDbContextOptions">
            <summary>
                The options to be used by a <see cref="T:Microsoft.Data.Entity.DbContext"/>. You normally override 
                <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> or use a <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder"/> 
                to create instances of classes that implement this interface, they are not designed to be directly created 
                in your application code. 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.IDbContextOptions.Extensions">
            <summary>
                Gets the extensions that store the configured options.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.IDbContextOptions.FindExtension``1">
            <summary>
                Gets the extension of the specified type. Returns null if no extension of the specified type is configured.
            </summary>
            <typeparam name="TExtension"> The type of the extension to get. </typeparam>
            <returns> The extension, or null if none was found. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IDbContextOptionsBuilderInfrastructure">
            <summary>
                <para>
                    Explicitly implemented by <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder"/> to hide methods that are used by database provider
                    extension methods but not intended to be called by application developers.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension``1(``0)">
            <summary>
                <para>
                    Adds the given extension to the options. If an existing extension of the same type already exists, it will be replaced.
                </para>
                <para>
                    This property is intended for use by extension methods to configure the context. It is not intended to be used in
                    application code.
                </para>
            </summary>
            <typeparam name="TExtension"> The type of extension to be added. </typeparam>
            <param name="extension"> The extension to be added. </param>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IDbContextOptionsExtension">
            <summary>
                <para>
                    Interface for extensions that are stored in <see cref="P:Microsoft.Data.Entity.Infrastructure.DbContextOptions.Extensions"/>. 
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.IDbContextOptionsExtension.ApplyServices(Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder)">
            <summary>
                Adds the services required to make the selected options work. This is used when there is no external <see cref="T:System.IServiceProvider"/> 
                and EF is maintaining its own service provider internally. This allows database providers (and other extensions) to register their
                required services when EF is creating an service provider.
            </summary>
            <param name="builder"> The builder to add services to. </param>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IKeyValue">
            <summary>
                <para>
                    Represents the values assigned to a key of an entity. This type is mostly used to test the equivalence of entities
                    based on their key values.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.IKeyValue.Key">
            <summary>
                They key that these values belong to (may be the primary key or an alternate key).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Infrastructure.IKeyValue.Value">
            <summary>
                The values assigned to the properties that make up the key. If they key has a single value, the actual value is returned.
                If it is a composite key, then an array containing the property values is returned.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.IModelSource">
            <summary>
                <para>
                    Produces an <see cref="T:Microsoft.Data.Entity.Metadata.IModel"/> based on a context. This is typically implemented by database providers to ensure that any conventions
                    and validation specific to their database are used.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.IModelSource.GetModel(Microsoft.Data.Entity.DbContext,Microsoft.Data.Entity.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.Data.Entity.Internal.IModelValidator)">
            <summary>
                Gets the model to be used.
            </summary>
            <param name="context"> The context the model is being produced for. </param>
            <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
            <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
            <returns> The model to be used. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Infrastructure.ModelSource">
            <summary>
                <para>
                    A base implementation of <see cref="T:Microsoft.Data.Entity.Infrastructure.IModelSource"/> that produces a model based on the <see cref="T:Microsoft.Data.Entity.DbSet`1"/> properties
                    exposed on the context. The model is cached to avoid recreating it every time it is requested.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.ModelSource.GetModel(Microsoft.Data.Entity.DbContext,Microsoft.Data.Entity.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.Data.Entity.Internal.IModelValidator)">
            <summary>
                Returns the model from the cache, or creates a model if it is not present in the cache.
            </summary>
            <param name="context"> The context the model is being produced for. </param>
            <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
            <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
            <returns> The model to be used. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.ModelSource.CreateModel(Microsoft.Data.Entity.DbContext,Microsoft.Data.Entity.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.Data.Entity.Internal.IModelValidator)">
            <summary>
                Creates the model. This method is called when the model was not found in the cache.
            </summary>
            <param name="context"> The context the model is being produced for. </param>
            <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
            <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
            <returns> The model to be used. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.ModelSource.CreateConventionSet(Microsoft.Data.Entity.Metadata.Conventions.Internal.IConventionSetBuilder)">
            <summary>
                Creates the convention set to be used for the model. Uses the <see cref="P:Microsoft.Data.Entity.Infrastructure.ModelSource.CoreConventionSetBuilder"/>
                if <paramref name="conventionSetBuilder"/> is null.
            </summary>
            <param name="conventionSetBuilder"> The convention set builder to be used. </param>
            <returns> The convention set to be used. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.ModelSource.FindSets(Microsoft.Data.Entity.ModelBuilder,Microsoft.Data.Entity.DbContext)">
            <summary>
                Adds the entity types found in <see cref="T:Microsoft.Data.Entity.DbSet`1"/> properties on the context to the model.
            </summary>
            <param name="modelBuilder"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.ModelSource.OnModelCreating(Microsoft.Data.Entity.DbContext,Microsoft.Data.Entity.ModelBuilder)">
            <summary>
                Runs <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)"/> from the context.
            </summary>
            <param name="context"></param>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Microsoft.Data.Entity.Internal.CoreOptionsExtension">
            <summary>
                Used to store the options specified via <see cref="T:Microsoft.Data.Entity.DbContextOptionsBuilder"/> that are applicable to all databases.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreOptionsExtension.#ctor">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Internal.CoreOptionsExtension" /> class.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreOptionsExtension.#ctor(Microsoft.Data.Entity.Internal.CoreOptionsExtension)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Internal.CoreOptionsExtension" /> class with the same options as an
                existing instance.
            </summary>
            <param name="copyFrom"> The <see cref="T:Microsoft.Data.Entity.Internal.CoreOptionsExtension"/> to copy options from. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreOptionsExtension.IsSensitiveDataLoggingEnabled">
            <summary>
                Gets or sets a value indicating whether application data can be included in exception messages, logging, etc. 
                This can include the values assigned to properties of your entity instances, parameter values for commands being 
                sent to the database, and other such data. You should only enable this flag if you have the appropriate security 
                measures in place based on the sensitivity of this data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreOptionsExtension.SensitiveDataLoggingWarned">
            <summary>
                Gets or sets a value indicating whether a warning has been logged that <see cref="P:Microsoft.Data.Entity.Internal.CoreOptionsExtension.IsSensitiveDataLoggingEnabled"/>
                is enabled. This is used internally by EF to ensure the warning is only displayed once per context type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreOptionsExtension.Model">
            <summary>
                Gets or sets the model to be used for the context. If the model is set, then <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)"/>
                will not be run.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreOptionsExtension.ApplyServices(Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder)">
            <summary>
                Adds the services required to make the selected options work. This is used when there is no external <see cref="T:System.IServiceProvider"/> 
                and EF is maintaining its own service provider internally. Since all the core services are already added to the service provider,
                this method does nothing.
            </summary>
            <param name="builder"> The builder to add services to. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ArgumentIsEmpty(System.Object)">
            <summary>
            The string argument '{argumentName}' cannot be empty.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CircularDependency(System.Object)">
            <summary>
            A circular dependency was detected: {cycle}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidEnumValue(System.Object,System.Object)">
            <summary>
            The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidPropertiesExpression(System.Object)">
            <summary>
            The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidPropertyExpression(System.Object)">
            <summary>
            The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.IdentityConflict(System.Object)">
            <summary>
            The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidPrimaryKey(System.Object)">
            <summary>
            The instance of entity type '{entityType}' cannot be tracked because it has an invalid (e.g. null or CLR default) primary key. Either set the key explicitly or consider using an IValueGenerator to generate unique key values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.WrongStateManager(System.Object)">
            <summary>
            Cannot start tracking InternalEntityEntry for entity type '{entityType}' because it was created by a different StateManager instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.MultipleEntries(System.Object)">
            <summary>
            Cannot start tracking InternalEntityEntry for entity type '{entityType}' because another InternalEntityEntry is already tracking the same entity.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyNotFound(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists and has been included in the model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.EmptySequence">
            <summary>
            Sequence contains no elements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.MoreThanOneElement">
            <summary>
            Sequence contains more than one element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.MoreThanOneMatch">
            <summary>
            Sequence contains more than one matching element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.NoMatch">
            <summary>
            Sequence contains no matching element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CollectionArgumentIsEmpty(System.Object)">
            <summary>
            The collection argument '{argumentName}' must contain at least one element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InconsistentEntityType(System.Object)">
            <summary>
            The properties provided for the argument '{argumentName}' are declared on different entity types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.EntityRequiresKey(System.Object)">
            <summary>
            The entity type '{entityType}' requires a key to be defined.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.KeyPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
            The specified key properties {key} are not declared on the entity type '{entityType}'. Ensure key properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ForeignKeyPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
            The specified foreign key properties {foreignKey} are not declared on the entity type '{entityType}'. Ensure foreign key properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.IndexPropertiesWrongEntity(System.Object,System.Object)">
            <summary>
            The specified index properties {index} are not declared on the entity type '{entityType}'. Ensure index properties are declared on the target entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.IQueryableNotAsync(System.Object)">
            <summary>
            The source IQueryable doesn't implement IAsyncEnumerable&lt;{genericParameter}&gt;. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.IQueryableProviderNotAsync">
            <summary>
            The provider for the source IQueryable doesn't implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.EagerOriginalValuesRequired(System.Object)">
            <summary>
            Lazy original value tracking cannot be turned on for entity type '{entityType}'. Entities that do not implement both INotifyPropertyChanging and INotifyPropertyChanged require original values to be stored eagerly in order to correct detect changes made to entities.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.OriginalValueNotTracked(System.Object,System.Object)">
            <summary>
            The original value for property '{property}' of entity type '{entityType}' cannot be accessed because it is not being tracked. To access all original values set 'UseLazyOriginalValues' to false on the entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.MissingBackingField(System.Object,System.Object,System.Object)">
            <summary>
            The property '{entityType}.{property}' is annotated with backing field '{field}' but that field cannot be found.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.BadBackingFieldType(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The annotated backing field '{field}' of type '{fieldType}' cannot be used for the property '{entityType}.{property}' of type '{propertyType}'. Only backing fields of types that are assignable from the property type can be used.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NoFieldOrSetter(System.Object,System.Object)">
            <summary>
            No backing field could be discovered for property '{entityType}.{property}' and the property does not have a setter. Either use a backing field name that can be matched by convention, annotate the property with a backing field, or define a property setter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NoClrType(System.Object)">
            <summary>
            The CLR entity materializer cannot be used for entity type '{entityType}' because it is a shadow-state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.MultipleProvidersConfigured(System.Object)">
            <summary>
            The database providers {storeNames}are configured. A context can only be configured to use a single database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.NoProviderConfigured">
            <summary>
            No database providers are configured. Configure a database provider by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.NoProviderServices">
            <summary>
            No database providers are available. Ensure that database provider services are added inside the call to AddEntityFramework on your ServiceCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.MultipleProvidersAvailable(System.Object)">
            <summary>
            The database providers {storeNames}are available. A context can only be configured to use a single database provider. Configure a database provider by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.MultiplePropertiesMatchedAsKeys(System.Object,System.Object)">
            <summary>
            Multiple potential primary key properties named '{property}' but differing only by case were found on entity type '{entityType}'. Configure the primary key explicitly using the SetKey fluent API.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NoValueGenerator(System.Object,System.Object,System.Object)">
            <summary>
            The '{property}' on entity type '{entityType}' does not have a value set and no value generator is available for properties of type '{propertyType}'. Either set a value for the property before adding the entity or configure a value generator for properties of type '{propertyType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.TempValuePersists(System.Object,System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' has a temporary value while attempting to change the entity's state to '{state}'. Either set a permanent value explicitly or ensure that the database is configured to generate values for this property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyWithStorageNameNotFound(System.Object,System.Object)">
            <summary>
            A property with the storage name '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists, has been included in the model, and has been configured with storage name specified.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.CurrentValuesAlwaysInSync">
            <summary>
            CurrentValues are always in sync with the entity state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.DatabaseException">
            <summary>
            An error occurred while running a database operation. See InnerException for details.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.LogExceptionDuringQueryIteration(System.Object,System.Object)">
            <summary>
            An exception occurred in the database while iterating the results of a query.{newline}{error}
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.LogExceptionDuringSaveChanges(System.Object,System.Object)">
            <summary>
            An exception occurred in the database while saving changes.{newline}{error}
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.PropertyMethodInvoked">
            <summary>
            The EF.Property&lt;T&gt; method may only be used within LINQ queries.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicateProperty(System.Object,System.Object,System.Object)">
            <summary>
            The property '{property}' cannot be added to the entity type '{entityType}' because a property with the same name already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NoClrProperty(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot exist on entity type '{entityType}' because the property is not marked as shadow state and no corresponding CLR property exists on the underlying type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyWrongClrType(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot exist on entity type '{entityType}' because the property is not marked as shadow state and the type of the corresponding CLR property does not match the type specified in the property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ClrPropertyOnShadowEntity(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot exist on entity type '{entityType}' because the entity type is marked as shadow state while the property is not. Shadow state entity types can only contain shadow state properties.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyInUse(System.Object,System.Object)">
            <summary>
            The property '{property}' cannot be removed from entity type '{entityType}' because it is being used in an index or key. All indexes and keys must be removed or redefined before the property can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.KeyInUse(System.Object,System.Object,System.Object)">
            <summary>
            Cannot remove key {key} from entity type '{entityType}' because it is referenced by a foreign key in entity type '{dependentType}'. All foreign keys must be removed or redefined before the referenced key can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicateNavigation(System.Object,System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because a navigation property with the same name already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationOnShadowEntity(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because the entity type is defined in shadow state and navigations properties cannot be added to shadow state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NoClrNavigation(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because there is no corresponding CLR property on the underlying type and navigations properties cannot be added to shadow state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationSingleWrongClrType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because its CLR type '{clrType}' does not match the expected CLR type '{targetType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationCollectionWrongClrType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The collection navigation property '{navigation}' cannot be added to the entity type '{entityType}' because its CLR type '{clrType}' does not implement 'IEnumerable&lt;{targetType}&gt;'. Collection navigation properties must implement IEnumerable&lt;&gt; of the related entity.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ForeignKeyCountMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The number of properties specified for the foreign key {foreignKey} on entity type '{dependentType}' does not match the number of properties in the principal key {principalKey} on entity type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ForeignKeyTypeMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The types of the properties specified for the foreign key {foreignKey} on entity type '{dependentType}' do not match the types of the properties in the principal key {principalKey} on entity type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationBadType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The type of navigation property '{navigation}' on the entity type '{entityType}' is '{foundType}' which does not implement ICollection&lt;{targetType}&gt;. Collection navigation properties must implement ICollection&lt;&gt; of the target type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationArray(System.Object,System.Object,System.Object)">
            <summary>
            The type of navigation property '{navigation}' on the entity type '{entityType}' is '{foundType}' which is an array type.. Collection navigation properties cannot be arrays.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationNoGetter(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' on the entity type '{entityType}' does not have a getter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationNoSetter(System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' on the entity type '{entityType}' does not have a setter. Read-only collection navigation properties must be initialized before use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationCannotCreateType(System.Object,System.Object,System.Object)">
            <summary>
            The type of navigation property '{navigation}' on the entity type '{entityType}' is '{foundType}' for which it was not possible to create a concrete instance. Either initialize the property before use, add a public parameterless constructor to the type, or use a type which can be assigned a HashSet&lt;&gt; or List&lt;&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.KeyReadOnly(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' is part of a key and so cannot be modified or marked as modified.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyReadOnlyAfterSave(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' is defined to be read-only after it has been saved, but its value has been modified or marked as modified.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyReadOnlyBeforeSave(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' is defined to be read-only before it is saved, but its value has been set to something other than a temporary or default value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.KeyPropertyMustBeReadOnly(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' must be marked as read-only after it has been saved because it is part of a key. Key properties are always read-only once an entity has been saved for the first time.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.RelationshipConceptualNull(System.Object,System.Object)">
            <summary>
            The association between entity types '{firstType}' and '{secondType}' has been severed but the foreign key for this relationship cannot be set to null. If the dependent entity should be deleted, then setup the relationship to use cascade deletes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyConceptualNull(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' is marked as null, but this cannot be saved because the property is marked as required.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicateForeignKey(System.Object,System.Object,System.Object)">
            <summary>
            The foreign key {foreignKey} cannot be added to the entity type '{entityType}' because a foreign key on the same properties already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicateIndex(System.Object,System.Object,System.Object)">
            <summary>
            The index {index} cannot be added to the entity type '{entityType}' because an index on the same properties already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicateKey(System.Object,System.Object,System.Object)">
            <summary>
            The key {key} cannot be added to the entity type '{entityType}' because a key on the same properties already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationToShadowEntity(System.Object,System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because the target entity type '{targetType}' is defined in shadow state and navigations properties cannot point to shadow state entities.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CollectionArgumentContainsNulls(System.Object)">
            <summary>
            The collection argument '{argumentName}' must not contain any null references.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.EntityTypeNotInRelationship(System.Object,System.Object,System.Object)">
            <summary>
            The specified entity type '{entityType}' is invalid. It should be either the dependent entity type '{dependentType}' or the principal entity type '{principalType}' or an entity type derived from one of them.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicateEntityType(System.Object)">
            <summary>
            The entity type '{entityType}' cannot be added to the model because an entity with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.UnsupportedAnnotationType(System.Object)">
            <summary>
            Annotations of type '{type}' are not supported. Only common simple .NET types are currently supported.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicateAnnotation(System.Object)">
            <summary>
            The annotation '{annotation}' cannot be added because an annotation with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.AnnotationNotFound(System.Object)">
            <summary>
            The annotation '{annotation}' was not found. Ensure that the annotation has been added.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.IncludeNotImplemented">
            <summary>
            The Include operator is not implemented by the current database provider.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.IncludeNonBindableExpression(System.Object)">
            <summary>
            The expression '{expression}' passed to the Include operator could not be bound.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.LogCompilingQueryModel(System.Object)">
            <summary>
            Compiling query model: '{queryModel}'
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.LogOptimizedQueryModel(System.Object)">
            <summary>
            Optimized query model: '{queryModel}'
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.LogCompiledQueryFunction">
            <summary>
            Compiled query expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.LogIncludingNavigation(System.Object)">
            <summary>
            Including navigation: '{navigation}'
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CannotBeNullable(System.Object,System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' cannot be marked as nullable/optional because the type of the property is '{propertyType}' which is not a nullable type. Any property can be marked as non-nullable/required, but only properties of nullable types and which are not part of primary key can be marked as nullable/optional.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.RecursiveOnModelCreating">
            <summary>
            An attempt was made to use the model while it was being created. A DbContext instance cannot be used inside OnModelCreating in any way that makes use of the model that is being created.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.RecursiveOnConfiguring">
            <summary>
            An attempt was made to use the context while it is being configured. A DbContext instance cannot be used inside OnConfiguring since it is still being configured at this point.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.EntityTypeInUseByForeignKey(System.Object,System.Object,System.Object)">
            <summary>
            The entity type '{entityType}' cannot be removed because it is being referenced by foreign key {foreignKey} on '{referencingEntityType}'. All referencing foreign keys must be removed or redefined before the entity type can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ArgumentPropertyNull(System.Object,System.Object)">
            <summary>
            The property '{property}' of the argument '{argument}' cannot be null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.RelationshipCannotBeInverted">
            <summary>
            The principal and dependent ends of the relationship cannot be flipped once foreign key or principal key properties have been specified.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidEntityType(System.Object,System.Object)">
            <summary>
            The entity type '{type}' provided for the argument '{argumentName}' must be a reference type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.IntegerConfigurationValueFormatError(System.Object,System.Object)">
            <summary>
            The value for the configuration entry '{configurationKey}' is '{invalidValue}', but an integer is expected.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ConnectionStringNotFound(System.Object)">
            <summary>
            No connection string named '{connectionString}' could be found in configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.UnhandledBindingType(System.Object)">
            <summary>
            Unhandled binding type: '{type}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.UnhandledExpressionType(System.Object)">
            <summary>
            Unhandled expression type: '{type}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ReferencedShadowKey(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The key {key} on entity type '{entityType}' contains properties in shadow state - {shadowProperties} and it is referenced by the foreign key {foreignKey} from entity type '{referencingEntityType}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ShadowKey(System.Object,System.Object,System.Object)">
            <summary>
            The key {key} on entity type '{entityType}' contains properties in shadow state - {shadowProperties}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ExpressionParameterizationException(System.Object)">
            <summary>
            An exception was thrown while attempting to evaluate the LINQ query parameter expression '{expression}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidValueGeneratorFactoryProperty(System.Object,System.Object,System.Object)">
            <summary>
            The '{factory}' cannot create a value generator for property '{property}' on entity type '{entityType}'. Only integer properties are supported.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DerivedEntityTypeKey(System.Object)">
            <summary>
            The derived type '{derivedType}' cannot have keys other than those declared on the root type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CircularInheritance(System.Object,System.Object)">
            <summary>
            The entity type '{entityType}' cannot inherit from '{baseEntityType}' because '{baseEntityType}' is a descendent of '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DerivedEntityCannotHaveKeys(System.Object)">
            <summary>
            Unable to set a base type for entity type '{entityType}' because it has one or more keys defined.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.GraphDoesNotContainVertex(System.Object)">
            <summary>
            The edge cannot be added because the graph does not contain vertex '{vertex}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CannotMaterializeAbstractType(System.Object)">
            <summary>
            Unable to create an instance of type entity type '{entityType}' because it is abstract. Either make it non-abstract or consider mapping at least one derived type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ForeignKeyReferencedEntityKeyMismatch(System.Object,System.Object)">
            <summary>
            The provided principal entity key '{principalKey}' is not a key on the entity type '{principalEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.WrongGenericPropertyType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Property '{property}' on entity type '{entityType}' is of type '{actualType}' but the generic type provided is of type '{genericType}'.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.NonGenericOptions">
            <summary>
            The DbContextOptions object registered in the service provider must be a DbContextOptions&lt;TContext&gt; where TContext is the type of the DbContext being used.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.OptionsExtensionNotFound(System.Object)">
            <summary>
            Options extension of type '{optionsExtension}' not found.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicatePropertiesOnBase(System.Object,System.Object,System.Object)">
            <summary>
            The type '{entityType}' cannot have base type '{baseType}' because both types include the properties: {properties}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CannotBeNullablePK(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' cannot be marked as nullable/optional because the property is a part of the primary key. Any property can be marked as non-nullable/required, but only properties of nullable types and which are not part of primary key can be marked as nullable/optional.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ForeignKeyCannotBeOptional(System.Object,System.Object)">
            <summary>
            The foreign key {foreignKey} on entity type '{entityType}' cannot be marked as optional because it does not contain any property of a nullable type. Any foreign key can be marked as required, but only foreign keys with at least one property of a nullable type and which is not part of primary key can be marked as optional.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ShadowEntity(System.Object)">
            <summary>
            Entity type '{entityType}' is in shadow-state. A valid model requires all entity types to have corresponding CLR type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CompositePKWithDataAnnotation(System.Object)">
            <summary>
            Entity type '{entityType}' has composite primary key defined with data annotations. To set composite primary key, use fluent API.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.DuplicateNavigationsOnBase(System.Object,System.Object,System.Object)">
            <summary>
            The type '{entityType}' cannot have base type '{baseType}' because both types include the navigations: {navigations}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.EntityTypeModelMismatch(System.Object,System.Object)">
            <summary>
            The entity types '{firstEntityType}' and '{secondEntityType}' do not belong to the same model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.HiLoBadBlockSize">
            <summary>
            The block size used for Hi-Lo value generation must be positive. When the Hi-Lo generator is backed by a SQL sequence this means that the sequence increment must be positive.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.IntraHierarchicalAmbiguousTargetEntityType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The entity type related to '{entityType}' cannot be determined because the specified foreign key {foreignKey} references entity type '{principalEntityType}' that it is in the same hierarchy as the entity type that it is declared on '{dependentEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NonClrBaseType(System.Object,System.Object)">
            <summary>
            The entity type '{entityType}' cannot inherit from '{baseEntityType}' because '{baseEntityType}' is a shadow state entity type while '{entityType}' is not.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NonShadowBaseType(System.Object,System.Object)">
            <summary>
            The entity type '{entityType}' cannot inherit from '{baseEntityType}' because '{entityType}' is a shadow state entity type while '{baseEntityType}' is not.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NotAssignableClrBaseType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The entity type '{entityType}' cannot inherit from '{baseEntityType}' because '{clrType}' is not a descendent of '{baseClrType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyWrongEntityClrType(System.Object,System.Object,System.Object)">
            <summary>
            CLR property '{property}' cannot be added to entity type '{entityType}' because it is declared on the CLR type '{clrType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyClrTypeCannotBeChangedWhenReferenced(System.Object,System.Object,System.Object)">
            <summary>
            The CLR type for property '{property}' cannot be changed because it is referenced by the foreign key {foreignKey} from entity type '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidNavigationWithInverseProperty(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The InversePropertyAttribute on property '{property}' on type '{entityType}' is not valid. The property '{referencedProperty}' is not a valid navigation property on the related type '{referencedEntityType}'. Ensure that the property exists and is a valid reference or collection navigation property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.SelfReferencingNavigationWithInverseProperty(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A relationship cannot be established from property '{property}' on type '{entityType}' to property '{referencedProperty}' on type '{referencedEntityType}'. Check the values in the InversePropertyAttribute to ensure relationship definitions are unique and reference from one navigation property to its corresponding inverse navigation property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.CoreStrings.DataBindingWithIListSource">
            <summary>
            Data binding directly to a store query is not supported. Instead materialize the results into a collection, by calling a method such as ToList() or ToArray(), and bind to the collection. This should be done to avoid sending a query to the database each time the databound control iterates the data.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.KeyAttributeOnDerivedEntity(System.Object,System.Object)">
            <summary>
            The derived type '{derivedType}' cannot have KeyAttribute on property '{property}' since primary key can only be declared on the root type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InversePropertyMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            InversePropertyAttributes on navigation '{navigation}' in entity type '{entityType}' and on navigation '{referencedNavigation}' in entity type '{referencedEntityType}' are not pointing to each other.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.CompositeFkOnProperty(System.Object,System.Object)">
            <summary>
            There are multiple properties pointing to navigation '{navigation}' in entity type '{entityType}'. To define composite foreign key using data annotations, use ForeignKeyAttribute on navigation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.FkAttributeOnPropertyNavigationMismatch(System.Object,System.Object,System.Object)">
            <summary>
            The ForeignKeyAttributes on property '{property}' and navigation '{navigation}' in entity type '{entityType}' do not point at each other. The value of ForeignKeyAttribute on property should be navigation name and the value of ForeignKeyAttribute on navigation should be the foreign key property name.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidPropertyListOnNavigation(System.Object,System.Object)">
            <summary>
            The property list specified using ForeignKeyAttribute on navigation '{navigation}' in entity type '{entityType}' is incorrect. The attribute value should be comma-separated list of property names.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.InvalidRelationshipUsingDataAnnotations(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Invalid relationship has been specified using InverseProperty and ForeignKey. The navigation '{navigation}' in entity type '{entityType}' and the navigation '{referencedNavigation}' in entity type '{referencedEntityType}' are related by InversePropertyAttribute but the ForeignKeyAttribute specified for both navigations have different values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ConflictingNavigation(System.Object,System.Object,System.Object)">
            <summary>
            The property '{property}' cannot be added to the entity type '{entityType}' because a navigation property with the same name already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ConflictingProperty(System.Object,System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because a property with the same name already exists on entity type '{duplicateEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.EntityTypeNotInRelationshipStrict(System.Object,System.Object,System.Object)">
            <summary>
            The specified entity type '{entityType}' is invalid. It should be either the dependent entity type '{dependentType}' or the principal entity type '{principalType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.EntityTypeInUseByDerived(System.Object,System.Object)">
            <summary>
            The entity type '{entityType}' cannot be removed because '{derivedEntityType}' is derived from it. All derived entity types must be removed or redefined before the entity type can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationNotAdded(System.Object,System.Object)">
            <summary>
            The navigation '{navigation}' on entity type '{entityType}' has not been added to the model, or ignored, or target entityType ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyNotAdded(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' has not been added to the model or ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.PropertyNotMapped(System.Object,System.Object)">
            <summary>
            The property '{property}' on entity type '{entityType}' has CLR type which is not supported by current provider and it has not been configured to use any supported column type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.NavigationForWrongForeignKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The navigation property '{navigation}' on entity type '{entityType}' cannot be associated with foreign key {targetFk} because it was created for foreign key {actualFk}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.ClrTypeWrongName(System.Object,System.Object)">
            <summary>
            The specified CLR type '{clrType}' does not match the entity type name '{entity}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.CoreStrings.EntityTypeInUse(System.Object)">
            <summary>
            The CLR type cannot be set on the entity type '{entityType}' because it has members, base entity type or derived entity types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.DeleteBehavior">
            <summary>
                Indicates how a delete operation is applied to dependent entities in a relationship when the principal is deleted
                or the relationship is severed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Metadata.DeleteBehavior.Restrict">
            <summary>
                The delete operation is not applied to dependent entities. The dependent entities remain unchanged.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Metadata.DeleteBehavior.SetNull">
            <summary>
                The foreign key properties in dependent entities are set to null. This cascading behavior is only applied
                to entities that are being tracked by the context. A corresponding cascade behavior should be setup in the
                database to ensure data that is not being tracked by the context has the same action applied. If you use
                EF to create the database, this cascade behavior will be setup for you.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Metadata.DeleteBehavior.Cascade">
            <summary>
                Dependent entities are also deleted. This cascading behavior is only applied
                to entities that are being tracked by the context. A corresponding cascade behavior should be setup in the
                database to ensure data that is not being tracked by the context has the same action applied. If you use
                EF to create the database, this cascade behavior will be setup for you.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IEntityType">
            <summary>
                Represents an entity in an <see cref="T:Microsoft.Data.Entity.Metadata.IModel"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IEntityType.Model">
            <summary>
                Gets the model this entity belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IEntityType.Name">
            <summary>
                Gets the name of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IEntityType.BaseType">
            <summary>
                Gets the base type of the entity. Returns null if this is not a derived type in an inheritance hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IEntityType.ClrType">
            <summary>
                <para>
                    Gets the CLR class that is used to represent instances of this entity. Returns null if the entity does not have a 
                    corresponding CLR class (known as a shadow entity).
                </para>
                <para>
                    Shadow entities are not currently supported in a model that is used at runtime with a <see cref="T:Microsoft.Data.Entity.DbContext"/>. 
                    Therefore, shadow entities will only exist in migration model snapshots, etc.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.FindPrimaryKey">
            <summary>
                <para>
                    Gets primary key for this entity. Returns null if no primary key is defined.
                </para>
                <para>
                    To be a valid model, each entity type must have a primary key defined. Therefore, the primary key may be 
                    null while the model is being created, but will be present by the time the model is used with a <see cref="T:Microsoft.Data.Entity.DbContext"/>.     
                </para>
            </summary>
            <returns> The primary key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.FindKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty})">
            <summary>
                Gets the primary or alternate key that is defined on the given properties. Returns null if no key is defined
                for the given properties.
            </summary>
            <param name="properties"> The properties that make up the key. </param>
            <returns> The key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.GetKeys">
            <summary>
                Gets the primary and alternate keys for this entity.
            </summary>
            <returns> The primary and alternate keys. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.FindForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty},Microsoft.Data.Entity.Metadata.IKey,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.GetForeignKeys">
            <summary>
                Gets the foreign keys defined on this entity.
            </summary>
            <returns> The foreign keys defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.FindIndex(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty})">
            <summary>
                Gets the index defined on the given properties. Returns null if no index is defined.
            </summary>
            <param name="properties"> The properties to find the index on. </param>
            <returns> The index, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.GetIndexes">
            <summary>
                Gets the indexes defined on this entity.
            </summary>
            <returns> The indexes defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.FindProperty(System.String)">
            <summary>
                <para>
                    Gets the property with a given name. Returns null if no property with the given name is defined.
                </para>
                <para>
                    This API only finds scalar properties and does not find navigation properties. Use 
                    <see cref="M:Microsoft.Data.Entity.EntityTypeExtensions.FindNavigation(Microsoft.Data.Entity.Metadata.IEntityType,System.String)"/> to find a navigation property.
                </para>
            </summary>
            <param name="name"> The name of the property. </param>
            <returns> The property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IEntityType.GetProperties">
            <summary>
                <para>
                    Gets the properties defined on this entity.
                </para>
                <para>
                    This API only returns scalar properties and does not return navigation properties. Use 
                    <see cref="M:Microsoft.Data.Entity.EntityTypeExtensions.GetNavigations(Microsoft.Data.Entity.Metadata.IEntityType)"/> to get navigation properties.
                </para>
            </summary>
            <returns> The properties defined on this entity. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IForeignKey">
            <summary>
                Represents a relationship where a foreign key property(s) in a dependent entity type
                reference a corresponding primary or alternate key in a principal entity type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.DeclaringEntityType">
            <summary>
                Gets the dependent entity type. This may be different from the type that <see cref="P:Microsoft.Data.Entity.Metadata.IForeignKey.Properties"/>
                are defined on when the relationship is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.Properties">
            <summary>
                Gets the foreign key properties in the dependent entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.PrincipalEntityType">
            <summary>
                Gets the principal entity type that this relationship targets. This may be different from the type that 
                <see cref="P:Microsoft.Data.Entity.Metadata.IForeignKey.PrincipalKey"/> is defined on when the relationship targets a derived type in an inheritance 
                hierarchy (since the key is defined on the base type of the hierarchy).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.PrincipalKey">
            <summary>
                Gets the primary or alternate key that the relationship targets.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.DependentToPrincipal">
            <summary>
                Gets the navigation property on the dependent entity type that points to the principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.PrincipalToDependent">
            <summary>
                Gets the navigation property on the principal entity type that points to the dependent entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.IsUnique">
            <summary>
                Gets a value indicating whether the values assigned to the foreign key properties are unique.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.IsRequired">
            <summary>
                Gets a value indicating if this relationship is required. If true, the dependent entity must always be
                assigned to a valid principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IForeignKey.DeleteBehavior">
            <summary>
                Gets a value indicating how a delete operation is applied to dependent entities in the relationship when the 
                principal is deleted or the relationship is severed.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IIndex">
            <summary>
                Represents an index on a set of properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IIndex.Properties">
            <summary>
                Gets the properties that this index is defined on.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IIndex.IsUnique">
            <summary>
                Gets a value indicating whether the values assigned to the indexed properties are unique.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IIndex.DeclaringEntityType">
            <summary>
                Gets the entity type the index is defined on. This may be different from the type that <see cref="P:Microsoft.Data.Entity.Metadata.IIndex.Properties"/>
                are defined on when the index is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IKey">
            <summary>
                Represents a primary or alternate key on an entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IKey.Properties">
            <summary>
                Gets the properties that make up the key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IKey.DeclaringEntityType">
            <summary>
                Gets the entity type the key is defined on. This may be different from the type that <see cref="P:Microsoft.Data.Entity.Metadata.IKey.Properties"/>
                are defined on when the key is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IModel">
            <summary>
                Metadata about the shape of entities, the relationships between them, and how they map to the database. A model is typically
                created by overriding the <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> method on a derived context, or
                using <see cref="T:Microsoft.Data.Entity.ModelBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IModel.GetEntityTypes">
            <summary>
                Gets all entities types defined in the model.
            </summary>
            <returns> All entities types defined in the model. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IModel.FindEntityType(System.String)">
            <summary>
                Gets the entity with the given name. Returns null if no entity with the given name is found.
            </summary>
            <param name="name"> The name of the entity to find. </param>
            <returns> The entity type, or null if none if found. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IMutableAnnotatable">
            <summary>
                <para>
                    A class that exposes annotations that can be modified. Annotations allow for arbitrary metadata to be 
                    stored on an object.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableAnnotatable.Item(System.String)">
            <summary>
                Gets or sets the value of the annotation with the given name.
            </summary>
            <param name="name"> The key of the annotation. </param>
            <returns>         
                The value of the existing annotation if an annotation with the specified name already exists. Otherwise, null. 
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableAnnotatable.GetAnnotations">
            <summary>
                Gets all annotations on the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableAnnotatable.AddAnnotation(System.String,System.Object)">
            <summary>
                Adds an annotation to this object. Throws if an annotation with the specified name already exists.
            </summary>
            <param name="name"> The key of the annotation to be added. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The newly added annotation. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableAnnotatable.FindAnnotation(System.String)">
            <summary>
                Gets the annotation with the given name, returning null if it does not exist.
            </summary>
            <param name="name"> The key of the annotation to find. </param>
            <returns>
                The existing annotation if an annotation with the specified name already exists. Otherwise, null. 
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableAnnotatable.RemoveAnnotation(System.String)">
            <summary>
                Removes the given annotation from this object.
            </summary>
            <param name="name"> The annotation to remove. </param>
            <returns> The annotation that was removed. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IMutableEntityType">
            <summary>
                <para>
                    Represents an entity in an <see cref="T:Microsoft.Data.Entity.Metadata.IMutableModel"/>.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.Data.Entity.Metadata.IEntityType"/> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableEntityType.ClrType">
            <summary>
                <para>
                    Gets or sets the CLR class that is used to represent instances of this entity. Returns null if the entity does not 
                    have a corresponding CLR class (known as a shadow entity).
                </para>
                <para>
                    Shadow entities are not currently supported in a model that is used at runtime with a <see cref="T:Microsoft.Data.Entity.DbContext"/>. 
                    Therefore, shadow entities will only exist in migration model snapshots, etc.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableEntityType.Model">
            <summary>
                Gets the model this entity belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableEntityType.BaseType">
            <summary>
                Gets or sets the base type of the entity. Returns null if this is not a derived type in an inheritance hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.SetPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IMutableProperty})">
            <summary>
                Sets the primary key for this entity.
            </summary>
            <param name="properties"> The properties that make up the primary key. </param>
            <returns> The newly created key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.FindPrimaryKey">
            <summary>
                <para>
                    Gets primary key for this entity. Returns null if no primary key is defined.
                </para>
                <para>
                    To be a valid model, each entity type must have a primary key defined. Therefore, the primary key may be 
                    null while the model is being created, but will be present by the time the model is used with a <see cref="T:Microsoft.Data.Entity.DbContext"/>.     
                </para>
            </summary>
            <returns> The primary key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.AddKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IMutableProperty})">
            <summary>
                Adds a new alternate key to this entity type.
            </summary>
            <param name="properties"> The properties that make up the alternate key. </param>
            <returns> The newly created key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.FindKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty})">
            <summary>
                Gets the primary or alternate key that is defined on the given properties. Returns null if no key is defined
                for the given properties.
            </summary>
            <param name="properties"> The properties that make up the key. </param>
            <returns> The key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.GetKeys">
            <summary>
                Gets the primary and alternate keys for this entity.
            </summary>
            <returns> The primary and alternate keys. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.RemoveKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty})">
            <summary>
                Removes a primary or alternate key from this entity.
            </summary>
            <param name="properties"> The properties that make up the key. </param>
            <returns> The key that was removed. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.AddForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IMutableProperty},Microsoft.Data.Entity.Metadata.IMutableKey,Microsoft.Data.Entity.Metadata.IMutableEntityType)">
            <summary>
                Adds a new relationship to this entity.
            </summary>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The newly created foreign key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.FindForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty},Microsoft.Data.Entity.Metadata.IKey,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns null
                if no foreign key is found.
            </summary>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns> The foreign key, or null if none is defined. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.GetForeignKeys">
            <summary>
                Gets the foreign keys defined on this entity.
            </summary>
            <returns> The foreign keys defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.RemoveForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty},Microsoft.Data.Entity.Metadata.IKey,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Removes a relationship from this entity.
            </summary>
            <param name="properties"> The properties that the foreign key is defined on. </param>
            <param name="principalKey"> The primary or alternate key that is referenced. </param>
            <param name="principalEntityType"> 
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey"/>
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.AddIndex(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IMutableProperty})">
            <summary>
                Adds an index to this entity.
            </summary>
            <param name="properties"> The properties that are to be indexed. </param>
            <returns> The newly created index. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.FindIndex(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty})">
            <summary>
                Gets the index defined on the given properties. Returns null if no index is defined.
            </summary>
            <param name="properties"> The properties to find the index on. </param>
            <returns> The index, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.GetIndexes">
            <summary>
                Gets the indexes defined on this entity.
            </summary>
            <returns> The indexes defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.RemoveIndex(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Metadata.IProperty})">
            <summary>
                Removes an index from this entity.
            </summary>
            <param name="properties"> The properties that make up the index. </param>
            <returns> The index that was removed. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.AddProperty(System.String)">
            <summary>
                Adds a property to this entity.
            </summary>
            <param name="name"> The name of the property to add. </param>
            <returns> The newly created property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.FindProperty(System.String)">
            <summary>
                <para>
                    Gets the property with a given name. Returns null if no property with the given name is defined.
                </para>
                <para>
                    This API only finds scalar properties and does not find navigation properties. Use 
                    <see cref="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.FindNavigation(Microsoft.Data.Entity.Metadata.IMutableEntityType,System.String)"/> to find 
                    a navigation property.
                </para>
            </summary>
            <param name="name"> The name of the property. </param>
            <returns> The property, or null if none is found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.GetProperties">
            <summary>
                <para>
                    Gets the properties defined on this entity.
                </para>
                <para>
                    This API only returns scalar properties and does not return navigation properties. Use 
                    <see cref="M:Microsoft.Data.Entity.MutableEntityTypeExtensions.GetNavigations(Microsoft.Data.Entity.Metadata.IMutableEntityType)"/> to get navigation 
                    properties.
                </para>
            </summary>
            <returns> The properties defined on this entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableEntityType.RemoveProperty(System.String)">
            <summary>
                Removes a property from this entity.
            </summary>
            <param name="name"> The name of the property to remove. </param>
            <returns> The property that was removed. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IMutableForeignKey">
            <summary>
                <para>
                    Represents a relationship where a foreign key property(s) in a dependent entity type
                    reference a corresponding primary or alternate key in a principal entity type.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.Data.Entity.Metadata.IForeignKey"/> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.Properties">
            <summary>
                Gets the foreign key properties in the dependent entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.PrincipalKey">
            <summary>
                Gets the primary or alternate key that the relationship targets.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.DeclaringEntityType">
            <summary>
                Gets the dependent entity type. This may be different from the type that <see cref="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.Properties"/>
                are defined on when the relationship is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.PrincipalEntityType">
            <summary>
                Gets the principal entity type that this relationship targets. This may be different from the type that 
                <see cref="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.PrincipalKey"/> is defined on when the relationship targets a derived type in an inheritance 
                hierarchy (since the key is defined on the base type of the hierarchy).
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.DependentToPrincipal">
            <summary>
                Gets the navigation property on the dependent entity type that points to the principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.PrincipalToDependent">
            <summary>
                Gets the navigation property on the principal entity type that points to the dependent entity.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableForeignKey.HasDependentToPrincipal(System.String)">
            <summary>
                Sets the navigation property on the dependent entity type that points to the principal entity.
            </summary>
            <param name="name"> 
                The name of the navigation property on the dependent type. Passing null will result in there being
                no navigation property defined.
            </param>
            <returns> The newly created navigation property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableForeignKey.HasPrincipalToDependent(System.String)">
            <summary>
                Sets the navigation property on the principal entity type that points to the dependent entity.
            </summary>
            <param name="name"> 
                The name of the navigation property on the principal type. Passing null will result in there being
                no navigation property defined.
            </param>
            <returns> The newly created navigation property. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.IsUnique">
            <summary>
                Gets or sets a value indicating whether the values assigned to the foreign key properties are unique.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.IsRequired">
            <summary>
                Gets or sets a value indicating if this relationship is required. If true, the dependent entity must always be
                assigned to a valid principal entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableForeignKey.DeleteBehavior">
            <summary>
                Gets or sets a value indicating how a delete operation is applied to dependent entities in the relationship when the 
                principal is deleted or the relationship is severed.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IMutableIndex">
            <summary>
                <para>
                    Represents an index on a set of properties.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.Data.Entity.Metadata.IIndex"/> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableIndex.IsUnique">
            <summary>
                Gets or sets a value indicating whether the values assigned to the indexed properties are unique.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableIndex.Properties">
            <summary>
                Gets the properties that this index is defined on.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableIndex.DeclaringEntityType">
            <summary>
                Gets the entity type the index is defined on. This may be different from the type that <see cref="P:Microsoft.Data.Entity.Metadata.IMutableIndex.Properties"/>
                are defined on when the index is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IMutableKey">
            <summary>
                <para>
                    Represents a primary or alternate key on an entity.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.Data.Entity.Metadata.IKey"/> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableKey.Properties">
            <summary>
                Gets the properties that make up the key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableKey.DeclaringEntityType">
            <summary>
                Gets the entity type the key is defined on. This may be different from the type that <see cref="P:Microsoft.Data.Entity.Metadata.IMutableKey.Properties"/>
                are defined on when the key is defined a derived type in an inheritance hierarchy (since the properties
                may be defined on a base type).
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IMutableModel">
            <summary>
                <para>
                    Metadata about the shape of entities, the relationships between them, and how they map to the database. A model is typically
                    created by overriding the <see cref="M:Microsoft.Data.Entity.DbContext.OnConfiguring(Microsoft.Data.Entity.DbContextOptionsBuilder)"/> method on a derived context, or
                    using <see cref="T:Microsoft.Data.Entity.ModelBuilder"/>.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.Data.Entity.Metadata.IModel"/> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableModel.AddEntityType(System.String)">
            <summary>
                Adds an entity from the model.
            </summary>
            <param name="name"> The name of the entity to be added. </param>
            <returns> The new created entity. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableModel.FindEntityType(System.String)">
            <summary>
                Gets the entity with the given name. Returns null if no navigation property with the given name is found.
            </summary>
            <param name="name"> The name of the entity to find. </param>
            <returns> The entity type, or null if none if found. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableModel.RemoveEntityType(System.String)">
            <summary>
                Removes an entity from the model.
            </summary>
            <param name="name"> The name of the entity to be removed. </param>
            <returns> The entity that was removed. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.IMutableModel.GetEntityTypes">
            <summary>
                Gets all entities types defined in the model.
            </summary>
            <returns> All entities types defined in the model. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IMutableNavigation">
            <summary>
                <para>
                    Represents a navigation property which can be used to navigate a relationship.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.Data.Entity.Metadata.INavigation"/> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableNavigation.DeclaringEntityType">
            <summary>
                Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableNavigation.ForeignKey">
            <summary>
                Gets the foreign key that defines the relationship this navigation property will navigate.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IMutableProperty">
            <summary>
                <para>
                    Represents a scalar property of an entity.
                </para>
                <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.Data.Entity.Metadata.IProperty"/> represents a ready-only view of the same metadata.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.DeclaringEntityType">
            <summary>
                Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.ClrType">
            <summary>
                Gets or sets the type of value that this property holds.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.IsNullable">
            <summary>
                Gets or sets a value indicating whether this property can contain null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.ValueGenerated">
            <summary>
                Gets or sets a value indicating when a value for this property will be generated by the database. Even when the
                property is set to be generated by the database, EF may still attempt to save a specific value (rather than
                having one generated by the database) when the entity is added and a value is assigned, or the property is  
                marked as modified for an existing entity. See <see cref="P:Microsoft.Data.Entity.Metadata.IMutableProperty.IsStoreGeneratedAlways"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.IsReadOnlyBeforeSave">
            <summary>
                Gets or sets a value indicating whether or not this property can be modified before the entity is
                saved to the database. If true, an exception will be thrown if a value is assigned to
                this property when it is in the <see cref="F:Microsoft.Data.Entity.EntityState.Added"/> state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.IsReadOnlyAfterSave">
            <summary>
                Gets or sets a value indicating whether or not this property can be modified after the entity is
                saved to the database. If true, an exception will be thrown if a new value is assigned to
                this property after the entity exists in the database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.RequiresValueGenerator">
            <summary>
                Gets or sets a value indicating whether this property requires a <see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGenerator"/> to generate
                values when new entities are added to the context.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.IsShadowProperty">
            <summary>
                Gets or sets a value indicating whether this is a shadow property. A shadow property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.IsConcurrencyToken">
            <summary>
                Gets or sets a value indicating whether this property is used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IMutableProperty.IsStoreGeneratedAlways">
            <summary>
                Gets or sets a value indicating whether or not the database will always generate a value for this property.
                If set to true, a value will always be read back from the database whenever the entity is saved
                regardless of the state of the property. If set to false, whenever a value is assigned to the property 
                (or marked as modified) EF will attempt to save that value to the database rather than letting the
                database generate one.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.INavigation">
            <summary>
                Represents a navigation property which can be used to navigate a relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.INavigation.ForeignKey">
            <summary>
                Gets the foreign key that defines the relationship this navigation property will navigate.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IProperty">
            <summary>
                Represents a scalar property of an entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.ClrType">
            <summary>
                Gets the type of value that this property holds.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.IsNullable">
            <summary>
                Gets a value indicating whether this property can contain null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.IsReadOnlyBeforeSave">
            <summary>
                Gets a value indicating whether or not this property can be modified before the entity is
                saved to the database. If true, an exception will be thrown if a value is assigned to
                this property when it is in the <see cref="F:Microsoft.Data.Entity.EntityState.Added"/> state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.IsReadOnlyAfterSave">
            <summary>
                Gets a value indicating whether or not this property can be modified after the entity is
                saved to the database. If true, an exception will be thrown if a new value is assigned to
                this property after the entity exists in the database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.IsStoreGeneratedAlways">
            <summary>
                Gets a value indicating whether or not the database will always generate a value for this property.
                If set to true, a value will always be read back from the database whenever the entity is saved
                regardless of the state of the property. If set to false, whenever a value is assigned to the property 
                (or marked as modified) EF will attempt to save that value to the database rather than letting the
                database generate one.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.ValueGenerated">
            <summary>
                Gets a value indicating when a value for this property will be generated by the database. Even when the
                property is set to be generated by the database, EF may still attempt to save a specific value (rather than
                having one generated by the database) when the entity is added and a value is assigned, or the property is  
                marked as modified for an existing entity. See <see cref="P:Microsoft.Data.Entity.Metadata.IProperty.IsStoreGeneratedAlways"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.RequiresValueGenerator">
            <summary>
                Gets a value indicating whether this property requires a <see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGenerator"/> to generate
                values when new entities are added to the context.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.IsShadowProperty">
            <summary>
                Gets a value indicating whether this is a shadow property. A shadow property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IProperty.IsConcurrencyToken">
            <summary>
                Gets a value indicating whether this property is used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.IPropertyBase">
            <summary>
                Base type for navigation and scalar properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IPropertyBase.Name">
            <summary>
                Gets the name of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.IPropertyBase.DeclaringEntityType">
            <summary>
                Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.SimpleModelFactory">
            <summary>
                <para>
                    Creates instances of <see cref="T:Microsoft.Data.Entity.Metadata.IMutableModel"/> that have no conventions. This is useful when 
                    Exhaustively configuring a model based on some existing metadata.
                </para>
                <para>
                    This is typically not used in application code since building a model by overriding 
                    <see cref="M:Microsoft.Data.Entity.DbContext.OnModelCreating(Microsoft.Data.Entity.ModelBuilder)"/> or using <see cref="T:Microsoft.Data.Entity.ModelBuilder"/>
                    directly is much easier.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.SimpleModelFactory.Create">
            <summary>
                Creates an empty model with no conventions. All aspects of the model must be exhaustively configured.
            </summary>
            <returns> The newly created model. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.ValueGenerated">
            <summary>
                Indicates when a value for a property will be generated by the database. Even when a
                property is set to be generated by the database, EF may still attempt to save a specific value (rather than
                having one generated by the database) when an entity is added and a value is assigned, or the property is  
                marked as modified for an existing entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Metadata.ValueGenerated.Never">
            <summary>
                A value is never generated by the database. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Metadata.ValueGenerated.OnAdd">
            <summary>
                A value is generated by the database when an entity is added. The most common scenario for this
                is generated primary key values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Metadata.ValueGenerated.OnAddOrUpdate">
            <summary>
                A value is generated every time an entity is saved. This is typically used for scenarios such as row 
                versions, timestamps, etc.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a collection that contains instances of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure the relationship. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Instance">
            <summary>
                <para>
                    Gets the internal builder being used to configure the relationship.
                </para>
                <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.WithOneBuilder(System.String)">
            <summary>
                Returns the internal builder to be used when <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" /> is called.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> The internal builder to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a collection that contains instances of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure the relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="reference">
                A lambda expression representing the reference navigation property on the other end of this
                relationship (<c>post => post.Blog</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.Data.Entity.Metadata.Internal.EntityType" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder" /> class to configure a given
                    entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the entity type being configured. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.New(Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                Creates a new builder based on the provided internal builder. This can be overridden by derived builders
                so that logic inherited from this base class will create instances of the derived builder. 
            </summary>
            <param name="builder"> The internal builder to create the new builder from. </param>
            <returns> The newly created builder. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalEntityTypeBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure the entity type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Metadata">
            <summary>
                The entity type being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the entity type belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.String)">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <param name="name"> The name of the base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.Type)">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <param name="entityType"> The base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasKey(System.String[])">
            <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the primary key. </param>
            <returns> An object that can be used to configure the primary key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasAlternateKey(System.String[])">
            <summary>
                Creates a new unique constraint for this entity type if one does not already exist over the specified
                properties.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the unique constraint. </param>
            <returns> An object that can be used to configure the unique constraint. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Property``1(System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property to be configured. </typeparam>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Property(System.Type,System.String)">
            <summary>
                <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
                <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
            </summary>
            <param name="propertyType"> The type of the property to be configured. </param>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.Ignore(System.String)">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])">
            <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
            <param name="propertyNames"> The names of the properties that make up the index. </param>
            <returns> An object that can be used to configure the index. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasOne(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasOne(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasMany(System.Type,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedType"> The entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.HasMany(System.String,System.String)">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
            <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.ReferenceBuilder(Microsoft.Data.Entity.Metadata.Internal.EntityType,System.String)">
            <summary>
                Creates a relationship builder for a relationship that has a reference navigation property on this entity.
            </summary>
            <param name="relatedEntityType"> The entity type that the relationship targets. </param>
            <param name="navigationName"> 
                The name of the navigation property on this entity. If null is passed, then a relationship with no navigation 
                property is created. 
            </param>
            <returns> The newly created builder. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.CollectionBuilder(Microsoft.Data.Entity.Metadata.Internal.EntityType,System.String)">
            <summary>
                Creates a relationship builder for a relationship that has a collection navigation property on this entity.
            </summary>
            <param name="relatedEntityType"> The entity type that the relationship targets. </param>
            <param name="navigationName"> 
                The name of the navigation property on this entity. If null is passed, then a relationship with no navigation 
                property is created. 
            </param>
            <returns> The newly created builder. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder.PropertyBuilder(System.Type,System.String)">
            <summary>
                Creates a builder for a property on this entity.
            </summary>
            <param name="propertyType"> The type of values stored in the property. </param>
            <param name="propertyName"> The name of the property. </param>
            <returns> The newly created builder. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.Data.Entity.Metadata.Internal.EntityType" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1" /> class to configure a
                    given entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal typeBuilder for the entity type being configured. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.New(Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder)">
            <summary>
                Creates a new builder based on the provided internal builder. This overridden implementation creates 
                <see cref="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1"/> instances so that logic inherited from the base class will 
                use those instead of <see cref="T:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder"/>.
            </summary>
            <param name="builder"> The internal builder to create the new builder from. </param>
            <returns> The newly created builder. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same typeBuilder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasBaseType(System.String)">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <param name="name"> The name of the base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasBaseType(System.Type)">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <param name="entityType"> The base type. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasBaseType``1">
            <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
            <typeparam name="TBaseType"> The base type. </typeparam>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the primary key property(s) (<c>blog => blog.Url</c>).
                </para>
                <para>
                    If the primary key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>post => new { post.Title, post.BlogId }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the primary key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasAlternateKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Creates a new unique constraint for this entity type if one does not already exist over the specified
                properties.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the unique constraint property(s) (<c>blog => blog.Url</c>).
                </para>
                <para>
                    If the unique constraint is made up of multiple properties then specify an anonymous type including
                    the properties (<c>post => new { post.Title, post.BlogId }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the unique constraint. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Returns an object that can be used to configure a property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog => blog.Url</c>).
            </param>
            <returns> An object that can be used to configure the property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyExpression">
                A lambda expression representing the property to be ignored
                (<c>blog => blog.Url</c>).
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.Ignore(System.String)">
            <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
            <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
            <param name="indexExpression">
                <para>
                    A lambda expression representing the property(s) to be included in the index
                    (<c>blog => blog.Url</c>).
                </para>
                <para>
                    If the index is made up of multiple properties then specify an anonymous type including the
                    properties (<c>post => new { post.Title, post.BlogId }</c>).
                </para>
            </param>
            <returns> An object that can be used to configure the index. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})" />
                    or
                    <see
                        cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="reference">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>post => post.Blog</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
                <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
                <para>
                    After calling this method, you should chain a call to
                    <see
                        cref="M:Microsoft.Data.Entity.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
            </summary>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="collection">
                A lambda expression representing the collection navigation property on this entity type that represents
                the relationship (<c>blog => blog.Posts</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
            <returns> An object that can be used to configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.Data.Entity.Metadata.Internal.Index" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalIndexBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder" /> class to configure a given index.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the index being configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalIndexBuilder}#Instance">
            <summary>
                The internal builder being used to configure the index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.Metadata">
            <summary>
                The index being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the index belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the index. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.IndexBuilder.IsUnique(System.Boolean)">
            <summary>
                Configures whether this index is unique (i.e. the value(s) for each instance must be unique).
            </summary>
            <param name="unique"> A value indicating whether this index is unique. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.Data.Entity.Metadata.Internal.Key" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalKeyBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder" /> class to configure a given key.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the key being configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalKeyBuilder}#Instance">
            <summary>
                The internal builder being used to configure the key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.Metadata">
            <summary>
                The key being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the key belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.KeyBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the key. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.Data.Entity.Metadata.Internal.Property" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder" /> class to configure a given
                    property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the property being configured. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalPropertyBuilder}#Instance">
            <summary>
                The internal builder being used to configure the property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.Metadata">
            <summary>
                The property being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#IMutableModel}#Instance">
            <summary>
                The model that the property belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.IsRequired(System.Boolean)">
            <summary>
                Configures whether this property must have a value assigned or whether null is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned null.
            </summary>
            <param name="required"> A value indicating whether the property is required. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.HasMaxLength(System.Int32)">
            <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
            <param name="maxLength"> The maximum length of data allowed in the property. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.IsConcurrencyToken(System.Boolean)">
            <summary>
                Configures whether this property should be used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
            <param name="concurrencyToken"> A value indicating whether this property is a concurrency token. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.ValueGeneratedNever">
            <summary>
                Configures a property to never have a value generated when an instance of this
                entity type is saved.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
            <remarks>
                Note that temporary values may still be generated for use internally before a
                new entity is saved.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.ValueGeneratedOnAdd">
            <summary>
                Configures a property to have a value generated only when saving a new entity, unless a non-null,
                non-temporary value has been set, in which case the set value will be saved instead. The value
                may be generated by a client-side value generator or may be generated by the database as part
                of saving the entity.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder.ValueGeneratedOnAddOrUpdate">
            <summary>
                Configures a property to have a value generated only when saving a new or existing entity, unless
                a non-null, non-temporary value has been set for a new entity, or the existing property value has
                been modified for an existing entity, in which case the set value will be saved instead.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.Data.Entity.Metadata.Internal.Property" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalPropertyBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder" /> class to configure a given
                    property.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> Internal builder for the property being configured. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.IsRequired(System.Boolean)">
            <summary>
                Configures whether this property must have a value assigned or whether null is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned null.
            </summary>
            <param name="required"> A value indicating whether the property is required. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.HasMaxLength(System.Int32)">
            <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
            <param name="maxLength"> The maximum length of data allowed in the property. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.IsConcurrencyToken(System.Boolean)">
            <summary>
                Configures whether this property should be used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.Data.Entity.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
            <param name="concurrencyToken"> A value indicating whether this property is a concurrency token. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.ValueGeneratedNever">
            <summary>
                Configures a property to never have a value generated when an instance of this
                entity type is saved.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
            <remarks>
                Note that temporary values may still be generated for use internally before a
                new entity is saved.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.ValueGeneratedOnAdd">
            <summary>
                Configures a property to have a value generated only when saving a new entity, unless a non-null,
                non-temporary value has been set, in which case the set value will be saved instead. The value
                may be generated by a client-side value generator or may be generated by the database as part
                of saving the entity.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.PropertyBuilder`1.ValueGeneratedOnAddOrUpdate">
            <summary>
                Configures a property to have a value generated only when saving a new or existing entity, unless
                a non-null, non-temporary value has been set for a new entity, or the existing property value has
                been modified for an existing entity, in which case the set value will be saved instead.
            </summary>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-many relationship.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder,Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder" /> class.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
            <param name="oldBuilder"> A builder to copy configuration from. </param>
            <param name="foreignKeySet">
                A value indicating whether the foreign key properties have been configured in this chain of configuration calls.
            </param>
            <param name="principalKeySet">
                A value indicating whether the principal key properties have been configured in this chain of configuration calls.
            </param>
            <param name="requiredSet">
                A value indicating whether required/optional has been configured in this chain of configuration calls.
            </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Builder">
            <summary>
                The internal builder being used to configure the entity type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Metadata">
            <summary>
                The foreign key that represents this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#IMutableModel}#Instance">
            <summary>
                The model that this relationship belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" />
                already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.HasForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one that does not
                    have a corresponding property in the entity class. The current value for the  property is stored in
                    the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.HasPrincipalKey(System.String[])" /> is not specified, then an attempt will be made to match
                    the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.HasPrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.IsRequired(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder.OnDelete(Microsoft.Data.Entity.Metadata.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the 
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-many relationship.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TPrincipalEntity"> The principal entity type in this relationship. </typeparam>
            <typeparam name="TDependentEntity"> The dependent entity type in this relationship. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2" />
                    class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder,Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2" /> 
                    class.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
            <param name="oldBuilder"> A builder to copy configuration from. </param>
            <param name="foreignKeySet">
                A value indicating whether the foreign key properties have been configured in this chain of configuration calls.
            </param>
            <param name="principalKeySet">
                A value indicating whether the principal key properties have been configured in this chain of configuration calls.
            </param>
            <param name="requiredSet">
                A value indicating whether required/optional has been configured in this chain of configuration calls.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.HasForeignKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> is not specified, then
                    an attempt will be made to match the data type and order of foreign key properties against the
                    primary key of the principal entity type. If they do not match, new shadow state properties that
                    form a unique index will be added to the principal entity type to serve as the reference key.
                    A shadow state property is one that does not have a corresponding property in the entity class. The
                    current value for the property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being
                    stored in instances of the entity class.
                </para>
            </summary>
            <param name="foreignKeyExpression">
                <para>
                    A lambda expression representing the foreign key property(s) (<c>post => post.BlogId</c>).
                </para>
                <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>comment => new { comment.BlogId, comment.PostTitle }</c>). The order specified should match the order of
                    corresponding keys in <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />.
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the reference key property(s) (<c>blog => blog.BlogId</c>).
                </para>
                <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>post => new { post.BlogId, post.PostTitle }</c>).
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.HasForeignKey(System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> is not specified, then an attempt will be made to match
                    the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.HasPrincipalKey(System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.IsRequired(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceCollectionBuilder`2.OnDelete(Microsoft.Data.Entity.Metadata.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the 
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on
                    an end of the relationship with a reference that points to an instance of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.EntityType,System.String,Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="relatedEntityType"> The entity type that the reference points to. </param>
            <param name="navigationName">
                The name of the reference navigation property on the end of the relationship that configuration began
                on. If null, there is no navigation property on this end of the relationship.
            </param>
            <param name="builder"> The internal builder being used to configure the relationship. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.ReferenceName">
            <summary>
                Gets the name of the reference navigation property on the end of the relationship that
                configuration began on. If null, there is no navigation property on this end of the relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.RelatedEntityType">
            <summary>
                Gets the entity type that the reference points to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure the relationship.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="collection">
                The name of the collection navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithManyBuilder(System.String)">
            <summary>
                Returns the internal builder to be used when <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" /> is called.
            </summary>
            <param name="collection">
                The name of the collection navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> The internal builder to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)">
            <summary>
                Configures this as a one-to-one relationship.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithOneBuilder(System.String)">
            <summary>
                Returns the internal builder to be used when <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> is called.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> The internal builder to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a relationship where configuration began on an end of the
                    relationship with a reference that points to an instance of another entity type.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type to be configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.EntityType,System.String,Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="relatedEntityType"> The entity type that the reference points to. </param>
            <param name="navigationName">
                The name of the reference navigation property on the end of the relationship that configuration began
                on. If null, there is no navigation property on this end of the relationship.
            </param>
            <param name="builder"> The internal builder being used to configure the relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="collection">
                A lambda expression representing the collection navigation property on the other end of this
                relationship (<c>blog => blog.Posts</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures this as a one-to-one relationship.
            </summary>
            <param name="reference">
                A lambda expression representing the reference navigation property on the other end of this
                relationship (<c>blog => blog.BlogInfo</c>). If no property is specified, the relationship will be
                configured without a navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.String)">
            <summary>
                Configures this as a one-to-many relationship.
            </summary>
            <param name="collection">
                The name of the collection navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.String)">
            <summary>
                Configures this as a one-to-one relationship.
            </summary>
            <param name="reference">
                The name of the reference navigation property on the other end of this relationship.
                If null, there is no navigation property on the other end of the relationship.
            </param>
            <returns> An object to further configure the relationship. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-one relationship.
                </para>
                <para>
                    If multiple reference key properties are specified, the order of reference key properties should
                    match the order that the primary key or unique index properties were configured on the principal
                    entity type.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder,Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder" /> class.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
            <param name="oldBuilder"> A builder to copy configuration from. </param>
            <param name="inverted">
                A value indicating whether to reverse the direction of the relationship.
            </param>
            <param name="foreignKeySet">
                A value indicating whether the foreign key properties have been configured in this chain of configuration calls.
            </param>
            <param name="principalKeySet">
                A value indicating whether the principal key properties have been configured in this chain of configuration calls.
            </param>
            <param name="requiredSet">
                A value indicating whether required/optional has been configured in this chain of configuration calls.
            </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Builder">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#Internal#InternalRelationshipBuilder}#Instance">
            <summary>
                Gets the internal builder being used to configure this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Metadata">
            <summary>
                The foreign key that represents this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.Microsoft#Data#Entity#Infrastructure#IInfrastructure{Microsoft#Data#Entity#Metadata#IMutableModel}#Instance">
            <summary>
                The model that this relationship belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.HasForeignKey(System.Type,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityType">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.HasForeignKey(System.String,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityTypeName">
                The name of the entity type that is the dependent in this relationship (the type that has the foreign
                key properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKey(System.Type,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="principalEntityType">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.HasPrincipalKey(System.String,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="principalEntityTypeName">
                The name of the entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.IsRequired(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder.OnDelete(Microsoft.Data.Entity.Metadata.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the 
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2">
            <summary>
                <para>
                    Provides a simple API for configuring a one-to-one relationship.
                </para>
                <para>
                    If multiple reference key properties are specified, the order of reference key properties should
                    match the order that the primary key or unique index properties were configured on the principal
                    entity type.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2" /> class.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.Data.Entity.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder,Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2" /> class.
                </para>
            </summary>
            <param name="builder"> The internal builder being used to configure this relationship. </param>
            <param name="oldBuilder"> A builder to copy configuration from. </param>
            <param name="inverted">
                A value indicating whether to reverse the direction of the relationship.
            </param>
            <param name="foreignKeySet">
                A value indicating whether the foreign key properties have been configured in this chain of configuration calls.
            </param>
            <param name="principalKeySet">
                A value indicating whether the principal key properties have been configured in this chain of configuration calls.
            </param>
            <param name="requiredSet">
                A value indicating whether required/optional has been configured in this chain of configuration calls.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasAnnotation(System.String,System.Object)">
            <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists it's value will be updated.
            </summary>
            <param name="annotation"> The key of the annotation to be added or updated. </param>
            <param name="value"> The value to be stored in the annotation. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey(System.Type,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityType">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <param name="principalEntityType">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey(System.String,System.String[])">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
            </summary>
            <param name="dependentEntityTypeName">
                The name of entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
            <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.String,System.String[])">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint
                will be introduced.
            </summary>
            <param name="principalEntityTypeName">
                The name of entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
            <param name="keyPropertyNames"> The name(s) of the reference key property(s). </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                <para>
                    Configures the property(s) to use as the foreign key for this relationship.
                </para>
                <para>
                    If <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
                    is not specified, then an attempt will be made to match the data type and order of foreign key
                    properties against the primary key of the principal entity type. If they do not match, new shadow
                    state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                    A shadow state property is one that does not have a corresponding property in the entity class. The
                    current value for the property is stored in the <see cref="T:Microsoft.Data.Entity.ChangeTracking.ChangeTracker" /> rather than being
                    stored in instances of the entity class.
                </para>
            </summary>
            <typeparam name="TDependentEntity">
                The entity type that is the dependent in this relationship. That is, the type
                that has the foreign key properties.
            </typeparam>
            <param name="foreignKeyExpression">
                <para>
                    A lambda expression representing the foreign key property(s) (<c>t => t.Id1</c>).
                </para>
                <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t => new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding keys in <see cref="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />.
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
            <typeparam name="TPrincipalEntity">
                The entity type that is the principal in this relationship. That is, the type
                that has the reference key properties.
            </typeparam>
            <param name="keyExpression">
                <para>
                    A lambda expression representing the reference key property(s) (<c>t => t.Id</c>).
                </para>
                <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>t => new { t.Id1, t.Id2 }</c>).
                </para>
            </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.IsRequired(System.Boolean)">
            <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned null).
            </summary>
            <param name="required"> A value indicating whether this is a required relationship. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Builders.ReferenceReferenceBuilder`2.OnDelete(Microsoft.Data.Entity.Metadata.DeleteBehavior)">
            <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the 
                principal is deleted or the relationship is severed.
            </summary>
            <param name="deleteBehavior"> The action to perform. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Metadata.Internal.EntityType.#ctor(System.String,Microsoft.Data.Entity.Metadata.Internal.Model)">
            <summary>
                Creates a new metadata object representing an entity type that will participate in shadow-state
                such that there is no underlying .NET type corresponding to this metadata object.
            </summary>
            <param name="name">The name of the shadow-state entity type.</param>
            <param name="model">The model associated with this entity type.</param>
        </member>
        <member name="P:Microsoft.Data.Entity.Metadata.Internal.EntityType.ClrType">
            <summary>
                Gets or sets the associated .NET type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.Database">
            <summary>
                <para>  
                    The main interaction point between a context and the database provider. 
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para>  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.Database.#ctor(Microsoft.Data.Entity.Query.IQueryCompilationContextFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Storage.Database" /> class. 
            </summary>
            <param name="queryCompilationContextFactory"> Factory for compilation contexts to process LINQ queries. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Update.IUpdateEntry})">
            <summary>
                Persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <returns> The number of state entries persisted to the database. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Update.IUpdateEntry},System.Threading.CancellationToken)">
            <summary>
                Asynchronously persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of entries persisted to the database.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.Database.CompileQuery``1(Remotion.Linq.QueryModel)">
            <summary>
                Translates a query model into a function that can be executed to get query results from the database.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> An object model representing the query to be executed. </param>
            <returns> A function that will execute the query. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.Database.CompileAsyncQuery``1(Remotion.Linq.QueryModel)">
            <summary>
                Translates a query model into a function that can be executed to asynchronously get query results from the database.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> An object model representing the query to be executed. </param>
            <returns> A function that will asynchronously execute the query. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.DatabaseErrorLogState">
            <summary>
                Provided as the state to <see cref="T:Microsoft.Extensions.Logging.ILogger"/> when logging an exception that occurred while accessing the database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.DatabaseErrorLogState.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Storage.DatabaseErrorLogState" /> class. 
            </summary>
            <param name="contextType"> The type of the derived context that the error occurred for. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseErrorLogState.ContextType">
            <summary>
                Gets the type of the derived context that the error occurred for.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.DatabaseProviderServices">
            <summary>
                <para>  
                    The base set of services required by EF for a database provider to function.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para> 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.DatabaseProviderServices.#ctor(System.IServiceProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Storage.DatabaseProviderServices" /> class. 
            </summary>
            <param name="services"> The service provider to resolve services from. </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.InvariantName">
            <summary>
                The unique name used to identify the database provider. This should be the same as the NuGet package name
                for the providers runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.Services">
            <summary>
                Gets the service provider to resolve services from.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.DatabaseProviderServices.GetService``1">
            <summary>
                Resolves a required service from <see cref="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.Services"/>.
            </summary>
            <typeparam name="TService"> The service to be resolved. </typeparam>
            <returns> The resolved service. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.ConventionSetBuilder">
            <summary>
                The convention set builder for the database provider. By default this returns null, meaning the
                default <see cref="T:Microsoft.Data.Entity.Metadata.Conventions.Internal.CoreConventionSetBuilder"/> will be used.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.ValueGeneratorSelector">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.ValueGeneration.IValueGeneratorSelector"/> for the database provider. By default, EF will register a default implementation
                (<see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorSelector"/>) which provides basic functionality but can be 
                overridden if needed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.ModelValidator">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Internal.IModelValidator"/> for the database provider. By default, EF will register a default implementation
                (<see cref="T:Microsoft.Data.Entity.Internal.LoggingModelValidator"/>) which provides basic functionality but can be 
                overridden if needed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.CompiledQueryCacheKeyGenerator">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.ICompiledQueryCacheKeyGenerator"/> for the database provider. By default, EF will register a default implementation
                (<see cref="T:Microsoft.Data.Entity.Query.CompiledQueryCacheKeyGenerator"/>) which provides basic functionality but can be 
                overridden if needed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.ExpressionPrinter">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.Internal.IExpressionPrinter"/> for the database provider. By default, EF will register a default implementation
                (<see cref="T:Microsoft.Data.Entity.Query.Internal.ExpressionPrinter"/>) which provides basic functionality but can be 
                overridden if needed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.ResultOperatorHandler">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.IResultOperatorHandler"/> for the database provider. By default, EF will register a default implementation
                (<see cref="T:Microsoft.Data.Entity.Query.ResultOperatorHandler"/>) which provides basic functionality but can be 
                overridden if needed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.QueryCompilationContextFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.IQueryCompilationContextFactory"/> for the database provider. By default, EF will register a default implementation
                (<see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorSelector"/>) which provides basic functionality but can be 
                overridden if needed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.ProjectionExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory"/> for the database provider. By default, EF will register a default implementation
                (<see cref="T:Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.ProjectionExpressionVisitorFactory"/>) which provides basic functionality but can be 
                overridden if needed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.Database">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Storage.IDatabase"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.Creator">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Storage.IDatabaseCreator"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.ModelSource">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Infrastructure.IModelSource"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.ValueGeneratorCache">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.ValueGeneration.IValueGeneratorCache"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.QueryContextFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.IQueryContextFactory"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.EntityQueryableExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.DatabaseProviderServices.EntityQueryModelVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.IEntityQueryModelVisitorFactory"/> for the database provider.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.DatabaseProvider`2">
            <summary>
                <para>  
                    The primary point where a database provider can tell EF that it has been selected for the current context
                    and provide the services required for it to function.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para>  
            </summary>
            <typeparam name="TProviderServices"> 
                The base set of services required by EF for the database provider to function. 
            </typeparam>
            <typeparam name="TOptionsExtension">
                The type of options that the database provider will add to <see cref="P:Microsoft.Data.Entity.Infrastructure.DbContextOptions.Extensions"/>
                to identify that is has been selected (and to store its database specific settings).
            </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.DatabaseProvider`2.GetProviderServices(System.IServiceProvider)">
            <summary>
                Gets the base set of services required by EF for the database provider to function.
            </summary>
            <param name="serviceProvider"> The service provider to resolve services from. </param>
            <returns> The services for this database provider. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.DatabaseProvider`2.IsConfigured(Microsoft.Data.Entity.Infrastructure.IDbContextOptions)">
            <summary>
                Gets a value indicating whether this database provider has been selected for a given context.
            </summary>
            <param name="options"> The options for the context. </param>
            <returns> True if the database provider has been selected, otherwise false. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.IDatabase">
            <summary>
                <para>  
                    The main interaction point between a context and the database provider. 
                </para>  
                <para>  
                    This interface is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para>  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Update.IUpdateEntry})">
            <summary>
                Persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <returns> The number of state entries persisted to the database. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Update.IUpdateEntry},System.Threading.CancellationToken)">
            <summary>
                Asynchronously persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of entries persisted to the database.
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabase.CompileQuery``1(Remotion.Linq.QueryModel)">
            <summary>
                Translates a query model into a function that can be executed to get query results from the database.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> An object model representing the query to be executed. </param>
            <returns> A function that will execute the query. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabase.CompileAsyncQuery``1(Remotion.Linq.QueryModel)">
            <summary>
                Translates a query model into a function that can be executed to asynchronously get query results from the database.
            </summary>
            <typeparam name="TResult"> The type of results returned by the query. </typeparam>
            <param name="queryModel"> An object model representing the query to be executed. </param>
            <returns> A function that will asynchronously execute the query. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.IDatabaseCreator">
            <summary>
                <para>  
                    Creates and deletes databases for a given database provider.
                </para>  
                <para>  
                    This interface is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para>  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeleted">
            <summary>
                <para>
                    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by 
                    the model for this context.
                </para>
            </summary>
            <returns> True if the database is deleted, false if it did not exist. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by 
                    the model for this context.
                </para>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> 
                A task that represents the asynchronous save operation. The task result contains true if the database is deleted, 
                false if it did not exist. 
            </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreated">
            <summary>
                Ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
            <returns> True if the database is created, false if it already existed. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> 
                A task that represents the asynchronous save operation. The task result contains true if the database is created, 
                false if it already existed. 
            </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.IDatabaseProvider">
            <summary>
                <para>  
                    The primary point where a database provider can tell EF that it has been selected for the current context
                    and provide the services required for it to function.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para>  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabaseProvider.GetProviderServices(System.IServiceProvider)">
            <summary>
                Gets the base set of services required by EF for the database provider to function.
            </summary>
            <param name="serviceProvider"> The service provider to resolve services from. </param>
            <returns> The services for this database provider. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.IDatabaseProvider.IsConfigured(Microsoft.Data.Entity.Infrastructure.IDbContextOptions)">
            <summary>
                Gets a value indicating whether this database provider has been selected for a given context.
            </summary>
            <param name="options"> The options for the context. </param>
            <returns> True if the database provider has been selected, otherwise false. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.IDatabaseProviderServices">
            <summary>
                <para>  
                    The base set of services required by EF for a database provider to function.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para> 
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.InvariantName">
            <summary>
                The unique name used to identify the database provider. This should be the same as the NuGet package name
                for the providers runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.Database">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Storage.IDatabase"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.Creator">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Storage.IDatabaseCreator"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.ValueGeneratorSelector">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.ValueGeneration.IValueGeneratorSelector"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.ConventionSetBuilder">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Metadata.Conventions.Internal.IConventionSetBuilder"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.ModelSource">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Infrastructure.IModelSource"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.ModelValidator">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Internal.IModelValidator"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.ValueGeneratorCache">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.ValueGeneration.IValueGeneratorCache"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.QueryContextFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.IQueryContextFactory"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.QueryCompilationContextFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.IQueryCompilationContextFactory"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.EntityQueryModelVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.IEntityQueryModelVisitorFactory"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.CompiledQueryCacheKeyGenerator">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.ICompiledQueryCacheKeyGenerator"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.ExpressionPrinter">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.Internal.IExpressionPrinter"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.ResultOperatorHandler">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.IResultOperatorHandler"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.EntityQueryableExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory"/> for the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.IDatabaseProviderServices.ProjectionExpressionVisitorFactory">
            <summary>
                Gets the <see cref="T:Microsoft.Data.Entity.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory"/> for the database provider.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Storage.ValueBuffer">
            <summary>
                <para>  
                    Represents a set of indexed values. Typically used to represent a row of data returned from a database.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para> 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Entity.Storage.ValueBuffer.Empty">
            <summary>
                A buffer with no values in it.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.ValueBuffer.#ctor(System.Collections.Generic.IList{System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Storage.ValueBuffer" /> class. 
            </summary>
            <param name="values"> The list of values for this buffer. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.ValueBuffer.#ctor(System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.Storage.ValueBuffer" /> class. 
            </summary>
            <param name="values"> The list of values for this buffer. </param>
            <param name="offset"> 
                The starting slot in <paramref name="values"/> for this buffer.
            </param>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.ValueBuffer.Item(System.Int32)">
            <summary>
                Gets the value at a requested index.
            </summary>
            <param name="index"> The index of the value to get. </param>
            <returns> The value at the requested index. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Storage.ValueBuffer.Count">
            <summary>
                Gets the number of values in this buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Storage.ValueBuffer.WithOffset(System.Int32)">
            <summary>
                Creates a new buffer with data starting at the given index in the current buffer.
            </summary>
            <param name="offset">
                The slot in the current buffer that will be the starting slot in the new buffer.
            </param>
            <returns> The newly created buffer. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.Update.IUpdateEntry">
            <summary>
                <para>  
                    The information passed to a database provider to save changes to an entity to the database.
                </para>  
                <para>  
                    This interface is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para>  
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Update.IUpdateEntry.EntityType">
            <summary>
                The type of entity to be saved to the database.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Update.IUpdateEntry.EntityState">
            <summary>
                The state of the entity to be saved.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Update.IUpdateEntry.IsModified(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets a value indicating if the specified property is modified. If true, the current value assigned
                to the property should be saved to the database.
            </summary>
            <param name="property"> The property to be checked. </param>
            <returns> True if the property is modified, otherwise false. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Update.IUpdateEntry.IsStoreGenerated(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets a value indicating if the specified property should have a value generated by the database.
            </summary>
            <param name="property"> The property to be checked. </param>
            <returns> True if the property should have a value generated by the database, otherwise false. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Update.IUpdateEntry.GetOriginalValue(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Gets the value assigned to the given property when it was retrieved from the database.
            </summary>
            <param name="property"> The property to get the original value for. </param>
            <returns> The original value for the property. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.Update.IUpdateEntry.Item(Microsoft.Data.Entity.Metadata.IPropertyBase)">
            <summary>
                Gets or sets the value currently assigned to a given property.
            </summary>
            <param name="propertyBase"> The property to get or set the current value for. </param>
            <returns> The current value assigned to the property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Update.IUpdateEntry.GetPrimaryKeyValue(System.Boolean)">
            <summary>
                Gets an object representing the values assigned to the primary key.
                <see cref="T:Microsoft.Data.Entity.Infrastructure.IKeyValue"/> is typically used to test the equivalence of key values. 
            </summary>
            <param name="originalValue"> A value indicating whether to get the current or original value. </param>
            <returns> The values assigned to the primary key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Update.IUpdateEntry.GetPrincipalKeyValue(Microsoft.Data.Entity.Metadata.IForeignKey,System.Boolean)">
            <summary>
                Gets an object representing the values assigned to the principal key that a foreign key references.
                <see cref="T:Microsoft.Data.Entity.Infrastructure.IKeyValue"/> is typically used to test the equivalence of key values. 
            </summary>
            <param name="foreignKey"> The foreign key to get the principal key values for. </param>
            <param name="originalValue"> A value indicating whether to get the current or original value. </param>
            <returns> The values assigned to the key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Update.IUpdateEntry.GetDependentKeyValue(Microsoft.Data.Entity.Metadata.IForeignKey,System.Boolean)">
            <summary>
                Gets an object representing the values assigned to a foreign key.
                <see cref="T:Microsoft.Data.Entity.Infrastructure.IKeyValue"/> is typically used to test the equivalence of key values. 
            </summary>
            <param name="foreignKey"> The foreign key to get values for. </param>
            <param name="originalValue"> A value indicating whether to get the current or original value. </param>
            <returns> The values assigned to the key. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Update.IUpdateEntry.ToEntityEntry">
            <summary>
                Gets an <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry"/> for the entity being saved. <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry"/> is an API optimized for
                application developers and <see cref="T:Microsoft.Data.Entity.Update.IUpdateEntry"/> is optimized for database providers, but there may be instances
                where a database provider wants to access information from <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry"/>.
            </summary>
            <returns> An <see cref="T:Microsoft.Data.Entity.ChangeTracking.EntityEntry"/> for this entity. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.GuidValueGenerator">
            <summary>
                Generates <see cref="T:System.Guid"/> values using <see cref="M:System.Guid.NewGuid"/>. 
                The generated values are non-temporary, meaning they will be saved to the database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.GuidValueGenerator.Next">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ValueGeneration.GuidValueGenerator.GeneratesTemporaryValues">
            <summary>
                Gets a value indicating whether the values generated are temporary or permanent. This implementation
                always returns false, meaning the generated values will be saved to the database.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.HiLoValueGenerator`1">
            <summary>
                <para>
                    Acts as a <see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGenerator" />  by requesting a block of values from the
                    underlying database and returning them one by one. Will ask the underlying
                    database for another block when the current block is exhausted.
                </para>
                <para>
                    A block is represented by a low value fetched from the database, and then a block size
                    that indicates how many sequential values can be used, starting from the low value, before
                    a new low value must be fetched from the database.
                </para>
            </summary>
            <typeparam name="TValue"> The type of values that are generated. </typeparam>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.HiLoValueGenerator`1.#ctor(Microsoft.Data.Entity.ValueGeneration.HiLoValueGeneratorState)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ValueGeneration.HiLoValueGenerator`1"/> class.
            </summary>
            <param name="generatorState"> The state used to keep track of which value to return next. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.HiLoValueGenerator`1.Next">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.HiLoValueGenerator`1.GetNewLowValue">
            <summary>
                Gets the low value for the next block of values to be used.
            </summary>
            <returns> The low value for the next block of values to be used. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.HiLoValueGeneratorState">
            <summary>
                The thread safe state used by <see cref="T:Microsoft.Data.Entity.ValueGeneration.HiLoValueGenerator`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.HiLoValueGeneratorState.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ValueGeneration.HiLoValueGeneratorState"/> class.
            </summary>
            <param name="blockSize"> 
                The number of sequential values that can be used, starting from the low value, before
                a new low value must be fetched from the database.
            </param>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.HiLoValueGeneratorState.Next``1(System.Func{System.Int64})">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <typeparam name="TValue"> The type of values being generated. </typeparam>
            <param name="getNewLowValue"> 
                A function to get the next low value if needed.
            </param>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.IValueGeneratorCache">
            <summary>
                <para>  
                Keeps a cache of value generators for properties.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para> 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.IValueGeneratorCache.GetOrAdd(Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IEntityType,System.Func{Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IEntityType,Microsoft.Data.Entity.ValueGeneration.ValueGenerator})">
            <summary>
                Gets the existing value generator from the cache, or creates a new one if one is not present in
                the cache.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType"> 
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types, 
                this entity type may be different from the declared entity type on <paramref name="property" /> 
            </param>
            <param name="factory"> Factory to create a new value generator if one is not present in the cache. </param>
            <returns> The existing or newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.IValueGeneratorSelector">
            <summary>
                <para>  
                    Selects value generators to be used to generate values for properties of entities.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para>  
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.IValueGeneratorSelector.Select(Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Selects the appropriate value generator for a given property.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType"> 
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types, 
                this entity type may be different from the declared entity type on <paramref name="property" /> 
            </param>
            <returns> The value generator to be used. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.SequentialGuidValueGenerator">
            <summary>
                Generates sequential <see cref="T:System.Guid"/> values using the same algorithm as NEWSEQUENTIALID()
                in Microsoft SQL Server. This is useful when entities are being saved to a database where sequential
                GUIDs will provide a performance benefit. The generated values are non-temporary, meaning they will 
                be saved to the database.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.SequentialGuidValueGenerator.Next">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ValueGeneration.SequentialGuidValueGenerator.GeneratesTemporaryValues">
            <summary>
                Gets a value indicating whether the values generated are temporary or permanent. This implementation
                always returns false, meaning the generated values will be saved to the database.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.TemporaryGuidValueGenerator">
            <summary>
                Generates <see cref="T:System.Guid"/> values using <see cref="M:System.Guid.NewGuid"/>. 
                The generated values are temporary, meaning they will be replaced by database
                generated values when the entity is saved.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ValueGeneration.TemporaryGuidValueGenerator.GeneratesTemporaryValues">
            <summary>
                Gets a value indicating whether the values generated are temporary or permanent. This implementation
                always returns true, meaning the generated values will be replaced by database generated values when 
                the entity is saved
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.ValueGenerator">
            <summary>
                Generates values for properties when an entity is added to a context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGenerator.Next">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGenerator.NextValue">
            <summary>
                Template method to be overridden by implementations to perform value generation.
            </summary>
            <returns> The generated value. </returns>
        </member>
        <member name="P:Microsoft.Data.Entity.ValueGeneration.ValueGenerator.GeneratesTemporaryValues">
            <summary>
                <para>
                    Gets a value indicating whether the values generated are temporary (i.e they should be replaced
                    by database generated values when the entity is saved) or are permanent (i.e. the generated values
                    should be saved to the database).
                </para>
                <para>
                    An example of temporary value generation is generating negative numbers for an integer primary key
                    that are then replaced by positive numbers generated by the database when the entity is saved. An
                    example of permanent value generation are client-generated values for a <see cref="T:System.Guid"/> primary
                    key which are saved to the database.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorCache">
            <summary>
                <para>  
                Keeps a cache of value generators for properties.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para> 
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorCache.GetOrAdd(Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IEntityType,System.Func{Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IEntityType,Microsoft.Data.Entity.ValueGeneration.ValueGenerator})">
            <summary>
                Gets the existing value generator from the cache, or creates a new one if one is not present in
                the cache.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType"> 
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types, 
                this entity type may be different from the declared entity type on <paramref name="property" /> 
            </param>
            <param name="factory"> Factory to create a new value generator if one is not present in the cache. </param>
            <returns> The existing or newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorFactory">
            <summary>
                Base class for factories that create value generators.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorFactory.Create(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Creates a new value generator.
            </summary>
            <param name="property"> The property to create the value generator for. </param>
            <returns> The newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorFactory`1">
            <summary>
               Factory to create value generators of type <typeparam name="TValueGenerator" />.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorFactory`1.Create(Microsoft.Data.Entity.Metadata.IProperty)">
            <summary>
                Creates a new value generator.
            </summary>
            <param name="property"> The property to create the value generator for. </param>
            <returns> The newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorSelector">
            <summary>
                <para>  
                    Selects value generators to be used to generate values for properties of entities.
                </para>  
                <para>  
                    This type is typically used by database providers (and other extensions). It is generally  
                    not used in application code.  
                </para>  
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorSelector.Cache">
            <summary>
                The cache being used to store value generator instances.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorSelector.#ctor(Microsoft.Data.Entity.ValueGeneration.IValueGeneratorCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorSelector"/> class.
            </summary>
            <param name="cache"> The cache to be used to store value generator instances. </param>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorSelector.Select(Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Selects the appropriate value generator for a given property.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType"> 
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types, 
                this entity type may be different from the declared entity type on <paramref name="property" /> 
            </param>
            <returns> The value generator to be used. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGeneratorSelector.Create(Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Metadata.IEntityType)">
            <summary>
                Creates a new value generator for the given property.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType"> 
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types, 
                this entity type may be different from the declared entity type on <paramref name="property" /> 
            </param>
            <returns> The newly created value generator. </returns>
        </member>
        <member name="T:Microsoft.Data.Entity.ValueGeneration.ValueGenerator`1">
            <summary>
                Generates values for properties when an entity is added to a context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGenerator`1.Next">
            <summary>
                Template method to be overridden by implementations to perform value generation.
            </summary>
            <returns> The generated value. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.ValueGeneration.ValueGenerator`1.NextValue">
            <summary>
                Gets a value to be assigned to a property.
            </summary>
            <returns> The value to be assigned to a property. </returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions">
            <summary>
                Extension methods for setting up Entity Framework related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddEntityFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the services required by the core of Entity Framework to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
            <remarks>
                <para>
                    You only need to use this functionality when you want Entity Framework to resolve the services it uses
                    from an external <see cref="T:System.IServiceProvider" />. If you are not using an external
                    <see cref="T:System.IServiceProvider" /> Entity Framework will take care of creating the services it requires.
                </para>
                <para>
                    The database you are using will also define extension methods that can be called on the returned
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder" /> to register the services required by the database. 
                    For example, when using EntityFramework.MicrosoftSqlServer you would call
                    <c>collection.AddEntityFramework().AddSqlServer()</c>.
                </para>
                <para>
                    For derived contexts to be registered in the <see cref="T:System.IServiceProvider" /> and resolve their services 
                    from the <see cref="T:System.IServiceProvider" /> you must chain a call to the 
                    <see cref="M:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder.AddDbContext``1(System.Action{Microsoft.Data.Entity.DbContextOptionsBuilder})" /> method on the returned
                    <see cref="T:Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder" />.
                </para>
            </remarks>
            <example>
                <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services.AddEntityFramework() 
                            .AddSqlServer()
                            .AddDbContext&lt;MyContext&gt;(options => options.UseSqlServer(connectionString)); 
                    }
                </code>
            </example>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
            <returns>
                A builder that allows further Entity Framework specific setup of the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </returns>
        </member>
    </members>
</doc>
