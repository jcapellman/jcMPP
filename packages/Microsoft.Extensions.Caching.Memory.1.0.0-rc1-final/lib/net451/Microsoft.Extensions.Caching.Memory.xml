<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.Caching.Memory</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(Microsoft.Extensions.OptionsModel.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})">
            <summary>
            Creates a new MemoryCache instance.
            </summary>
            <param name="clock"></param>
            <param name="listenForMemoryPressure"></param>
        </member>
        <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize">
            <summary>
            Cleans up the background collection events.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCache.Count">
            <summary>
            Gets the count of the current entries for diagnostic purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.DoMemoryPreassureCollection(System.Object)">
            This is called after a Gen2 garbage collection. We assume this means there was memory pressure.
            Remove at least 10% of the total entries (or estimated memory?).
        </member>
        <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)">
            Remove at least the given percentage (0.10 for 10%) of the total entries (or estimated memory?), according to the following policy:
            1. Remove all expired items.
            2. Bucket by CacheItemPriority.
            ?. Least recently used objects.
            ?. Items with the soonest absolute expiration.
            ?. Items with the soonest sliding expiration.
            ?. Larger objects - estimated by object graph size, inaccurate.
        </member>
        <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.ExpirePriorityBucket(System.Int32,System.Collections.Generic.List{Microsoft.Extensions.Caching.Memory.CacheEntry},System.Collections.Generic.List{Microsoft.Extensions.Caching.Memory.CacheEntry})">
            Policy:
            ?. Least recently used objects.
            ?. Items with the soonest absolute expiration.
            ?. Items with the soonest sliding expiration.
            ?. Larger objects - estimated by object graph size, inaccurate.
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.MemoryCacheServicesExtensions">
            <summary>
            Extension methods for setting up memory cache related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServicesExtensions.AddCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds memory caching services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>A reference to this instance after the operation has completed.</returns> 
        </member>
        <member name="T:Microsoft.Extensions.Internal.GcNotification">
            <summary>
            Registers a callback that fires each time a Gen2 garbage collection occurs,
            presumably due to memory pressure.
            For this to work no components can have a reference to the instance.
            </summary>
        </member>
    </members>
</doc>
