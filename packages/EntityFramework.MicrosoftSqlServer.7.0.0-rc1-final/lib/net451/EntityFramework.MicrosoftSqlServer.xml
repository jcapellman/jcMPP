<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework.MicrosoftSqlServer</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Data.Entity.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.Data.Entity.DbContextOptionsBuilder,System.String)">
            <summary>
                Configures the context to connect to a Microsoft SQL Server database.
            </summary>
            <param name="optionsBuilder"> The options for the context. </param>
            <param name="connectionString"> The connection string of the database to connect to. </param>
            <returns> An options builder to allow additional SQL Server specific configuration. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.Data.Entity.DbContextOptionsBuilder,System.Data.Common.DbConnection)">
            <summary>
                Configures the context to connect to a Microsoft SQL Server database.
            </summary>
            <param name="optionsBuilder"> The options for the context. </param>
            <param name="connection"> 
                An existing <see cref="T:System.Data.Common.DbConnection"/> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <returns> An options builder to allow additional SQL Server specific configuration. </returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Infrastructure.SqlServerDbContextOptionsBuilder.UseRowNumberForPaging">
            <summary>
                Use a ROW_NUMBER() in queries instead of OFFSET/FETCH. This method is backwards-compatible to SQL Server 2005.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.SqlServerStrings.InvalidEnumValue(System.Object,System.Object)">
            <summary>
            The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.SqlServerStrings.IdentityBadType(System.Object,System.Object,System.Object)">
            <summary>
            Identity value generation cannot be used for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Identity value generation can only be used with signed integer properties.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Internal.SqlServerStrings.SequenceBadType(System.Object,System.Object,System.Object)">
            <summary>
            SQL Server sequences cannot be used to generate values for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Sequences can only be used with integer properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Internal.SqlServerStrings.SqlServerNotInUse">
            <summary>
            SQL Server-specific methods can only be used when the context is using a SQL Server database provider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlServerEntityFrameworkServicesBuilderExtensions.AddSqlServer(Microsoft.Data.Entity.Infrastructure.EntityFrameworkServicesBuilder)">
            <summary>
                <para>
                    Adds the services required by the Microsoft SQL Server database provider for Entity Framework 
                    to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. You use this method when using dependency injection 
                    in your application, such as with ASP.NET. For more information on setting up dependency 
                    injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
                <para>
                    You only need to use this functionality when you want Entity Framework to resolve the services it uses
                    from an external <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. If you are not using an external
                    <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> Entity Framework will take care of creating the services it requires.
                </para>
            </summary>
            <example>
                <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services.AddEntityFramework() 
                            .AddSqlServer()
                            .AddDbContext&lt;MyContext&gt;(options => options.UseSqlServer(connectionString)); 
                    }
                </code>
            </example>
            <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
            <returns>
                A builder that allows further Entity Framework specific setup of the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </returns>
        </member>
    </members>
</doc>
